  Mon Jun 18 2018 21:48                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;===============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C265SXB or W65C816SXB
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C),2015-2018 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;-------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                        
    32                                        ifdef   W65C265SXB
    33                                        include "w65c265.inc"
    34                                        else
    35                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  Mon Jun 18 2018 21:48                                                                                                    Page 2


    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;==============================================================================
    33                        ; Status Register Bits
    34                        ;------------------------------------------------------------------------------
    35                        
    36             00000080   N_FLAG          equ     1<<7
    37             00000040   V_FLAG          equ     1<<6
    38             00000020   M_FLAG          equ     1<<5
    39             00000010   X_FLAG          equ     1<<4
    40             00000010   B_FLAG          equ     1<<4
    41             00000008   D_FLAG          equ     1<<3
    42             00000004   I_FLAG          equ     1<<2
    43             00000002   Z_FLAG          equ     1<<1
    44             00000001   C_FLAG          equ     1<<0
    45                        
    46                        ;==============================================================================
    47                        ; Macros
    48                        ;------------------------------------------------------------------------------
    49                        
    50                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    51                        ; is fixed at $0100-$01ff. 
    52                        
    53                        emulate         macro
    54                                        sec
    55                                        xce
    56                                        endm
    57                        
    58                        ; Puts the processor in native mode. The size of the memory and index register
    59                        ; operations is not controlled by the M & X bits in the status register.
    60                        
    61                        native          macro
    62                                        clc
    63                                        xce
    64                                        endm
    65                        
    66                        ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
    67                         
    68                        long_a          macro
    69                                        rep     #M_FLAG
    70                                        longa   on
    71                                        endm
    72                        
    73                        ; Resets the X bit making the index registers 16-bits wide
    74                        
    75                        long_i          macro
  Mon Jun 18 2018 21:48                                                                                                    Page 3


    76                                        rep     #X_FLAG
    77                                        longi   on
    78                                        endm
    79                        
    80                        ; Resets the M and X bits making the accumulator, memory accesses and index
    81                        ; registers 16-bits wide.
    82                                        
    83                        long_ai         macro
    84                                        rep     #M_FLAG|X_FLAG
    85                                        longa   on
    86                                        longi   on
    87                                        endm
    88                        
    89                        ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
    90                        
    91                        short_a         macro
    92                                        sep     #M_FLAG
    93                                        longa   off
    94                                        endm
    95                        
    96                        ; Sets the X bit making the index registers 8-bits wide.
    97                        
    98                        short_i         macro
    99                                        sep     #X_FLAG
   100                                        longi   off
   101                                        endm
   102                                        
   103                        ; Sets the M & X bits making the accumulator, memory accesses and index
   104                        ; registers 8-bits wide.
   105                        
   106                        short_ai        macro
   107                                        sep     #M_FLAG|X_FLAG
   108                                        longa   off
   109                                        longi   off
   110                                        endm
    36                                        endif
    37                        
    38                        ;===============================================================================
    39                        ;-------------------------------------------------------------------------------
    40                        
    41                        MNEM            macro   P,Q,R
    42                                        dw      ((((P-'@')<<5)|(Q-'@'))<<5)|(R-'@')
    43                                        endm
    44                        
    45                        ;===============================================================================
    46                        ; ASCII Character Codes
    47                        ;-------------------------------------------------------------------------------
    48                        
    49             00000001   SOH             equ     $01
    50             00000004   EOT             equ     $04
    51             00000006   ACK             equ     $06
    52             00000007   BEL             equ     $07
    53             00000008   BS              equ     $08
    54             0000000A   LF              equ     $0a
    55             0000000D   CR              equ     $0d
    56             00000015   NAK             equ     $15
    57             00000018   CAN             equ     $18
    58             0000001B   ESC             equ     $1b
  Mon Jun 18 2018 21:48                                                                                                    Page 4


    59             0000007F   DEL             equ     $7f
    60                        
    61                        ;===============================================================================
    62                        ;-------------------------------------------------------------------------------
    63                        
    64             00000000   OP_ADC          equ     0<<1
    65             00000002   OP_AND          equ     1<<1
    66             00000004   OP_ASL          equ     2<<1
    67             00000006   OP_BCC          equ     3<<1
    68             00000008   OP_BCS          equ     4<<1
    69             0000000A   OP_BEQ          equ     5<<1
    70             0000000C   OP_BIT          equ     6<<1
    71             0000000E   OP_BMI          equ     7<<1
    72             00000010   OP_BNE          equ     8<<1
    73             00000012   OP_BPL          equ     9<<1
    74             00000014   OP_BRA          equ     10<<1
    75             00000016   OP_BRK          equ     11<<1
    76             00000018   OP_BRL          equ     12<<1
    77             0000001A   OP_BVC          equ     13<<1
    78             0000001C   OP_BVS          equ     14<<1
    79             0000001E   OP_CLC          equ     15<<1
    80             00000020   OP_CLD          equ     16<<1
    81             00000022   OP_CLI          equ     17<<1
    82             00000024   OP_CLV          equ     18<<1
    83             00000026   OP_CMP          equ     19<<1
    84             00000028   OP_COP          equ     20<<1
    85             0000002A   OP_CPX          equ     21<<1
    86             0000002C   OP_CPY          equ     22<<1
    87             0000002E   OP_DEC          equ     23<<1
    88             00000030   OP_DEX          equ     24<<1
    89             00000032   OP_DEY          equ     25<<1
    90             00000034   OP_EOR          equ     26<<1
    91             00000036   OP_INC          equ     27<<1
    92             00000038   OP_INX          equ     28<<1
    93             0000003A   OP_INY          equ     29<<1
    94             0000003C   OP_JML          equ     30<<1
    95             0000003E   OP_JMP          equ     31<<1
    96             00000040   OP_JSL          equ     32<<1
    97             00000042   OP_JSR          equ     33<<1
    98             00000044   OP_LDA          equ     34<<1
    99             00000046   OP_LDX          equ     35<<1
   100             00000048   OP_LDY          equ     36<<1
   101             0000004A   OP_LSR          equ     37<<1
   102             0000004C   OP_MVN          equ     38<<1
   103             0000004E   OP_MVP          equ     39<<1
   104             00000050   OP_NOP          equ     40<<1
   105             00000052   OP_ORA          equ     41<<1
   106             00000054   OP_PEA          equ     42<<1
   107             00000056   OP_PEI          equ     43<<1
   108             00000058   OP_PER          equ     44<<1
   109             0000005A   OP_PHA          equ     45<<1
   110             0000005C   OP_PHB          equ     46<<1
   111             0000005E   OP_PHD          equ     47<<1
   112             00000060   OP_PHK          equ     48<<1
   113             00000062   OP_PHP          equ     49<<1
   114             00000064   OP_PHX          equ     50<<1
   115             00000066   OP_PHY          equ     51<<1
   116             00000068   OP_PLA          equ     52<<1
  Mon Jun 18 2018 21:48                                                                                                    Page 5


   117             0000006A   OP_PLB          equ     53<<1
   118             0000006C   OP_PLD          equ     54<<1
   119             0000006E   OP_PLP          equ     55<<1
   120             00000070   OP_PLX          equ     56<<1
   121             00000072   OP_PLY          equ     57<<1
   122             00000074   OP_REP          equ     58<<1
   123             00000076   OP_ROL          equ     59<<1
   124             00000078   OP_ROR          equ     60<<1
   125             0000007A   OP_RTI          equ     61<<1
   126             0000007C   OP_RTL          equ     62<<1
   127             0000007E   OP_RTS          equ     63<<1
   128             00000080   OP_SBC          equ     64<<1
   129             00000082   OP_SEC          equ     65<<1
   130             00000084   OP_SED          equ     66<<1
   131             00000086   OP_SEI          equ     67<<1
   132             00000088   OP_SEP          equ     68<<1
   133             0000008A   OP_STA          equ     69<<1
   134             0000008C   OP_STP          equ     70<<1
   135             0000008E   OP_STX          equ     71<<1
   136             00000090   OP_STY          equ     72<<1
   137             00000092   OP_STZ          equ     73<<1
   138             00000094   OP_TAX          equ     74<<1
   139             00000096   OP_TAY          equ     75<<1
   140             00000098   OP_TCD          equ     76<<1
   141             0000009A   OP_TCS          equ     77<<1
   142             0000009C   OP_TDC          equ     78<<1
   143             0000009E   OP_TRB          equ     79<<1
   144             000000A0   OP_TSB          equ     80<<1
   145             000000A2   OP_TSC          equ     81<<1
   146             000000A4   OP_TSX          equ     82<<1
   147             000000A6   OP_TXA          equ     83<<1
   148             000000A8   OP_TXS          equ     84<<1
   149             000000AA   OP_TXY          equ     85<<1
   150             000000AC   OP_TYA          equ     86<<1
   151             000000AE   OP_TYX          equ     87<<1
   152             000000B0   OP_WAI          equ     88<<1
   153             000000B2   OP_WDM          equ     89<<1
   154             000000B4   OP_XBA          equ     90<<1
   155             000000B6   OP_XCE          equ     91<<1
   156                        
   157             00000000   MD_ABS          equ     0<<1                    ; a
   158             00000002   MD_ACC          equ     1<<1                    ; A
   159             00000004   MD_ABX          equ     2<<1                    ; a,x
   160             00000006   MD_ABY          equ     3<<1                    ; a,y
   161             00000008   MD_ALG          equ     4<<1                    ; al
   162             0000000A   MD_ALX          equ     5<<1                    ; al,x
   163             0000000C   MD_AIN          equ     6<<1                    ; (a)
   164             0000000E   MD_AIX          equ     7<<1                    ; (a,x)
   165             00000010   MD_DPG          equ     8<<1                    ; d
   166             00000012   MD_STK          equ     9<<1                    ; d,s
   167             00000014   MD_DPX          equ     10<<1                   ; d,x
   168             00000016   MD_DPY          equ     11<<1                   ; d,x
   169             00000018   MD_DIN          equ     12<<1                   ; (d)
   170             0000001A   MD_DLI          equ     13<<1                   ; [d]
   171             0000001C   MD_SKY          equ     14<<1                   ; (d,s),y
   172             0000001E   MD_DIX          equ     15<<1                   ; (d,x)
   173             00000020   MD_DIY          equ     16<<1                   ; (d),y
   174             00000022   MD_DLY          equ     17<<1                   ; [d],y
  Mon Jun 18 2018 21:48                                                                                                    Page 6


   175             00000024   MD_IMP          equ     18<<1                   ;
   176             00000026   MD_REL          equ     19<<1                   ; r
   177             00000028   MD_RLG          equ     20<<1                   ; rl
   178             0000002A   MD_MOV          equ     21<<1                   ; xyc
   179             0000002C   MD_IMM          equ     22<<1                   ; # (A or M)
   180             0000002E   MD_INT          equ     23<<1                   ; # (BRK/COP/WDM)
   181             00000030   MD_IMX          equ     24<<1                   ; # (X or Y)
   182                        
   183                        ;===============================================================================
   184                        ; Data Areas
   185                        ;-------------------------------------------------------------------------------
   186                        
   187                                        page0
   188                                        org     $20
   189                        
   190 00:0020:              FLAGS           ds      1                       ; Emulated processor flags
   191 00:0021:              BUFLEN          ds      1                       ; Command buffer length
   192 00:0022:              BANK            ds      1                       ; Memory bank
   193                        
   194 00:0023:              ADDR_S          ds      3                       ; Start address
   195 00:0026:              ADDR_E          ds      3                       ; End address
   196                        
   197 00:0029:              BLOCK           ds      1                       ; XMODEM block number
   198 00:002A:              RETRIES         ds      1                       ; Retry count
   199 00:002B:              SUM             ds      1                       ; Checksum
   200                        
   201 00:002C:              TEMP            ds      4                       ; Scratch workspace
   202                        
   203                                        data
   204                                        org     $200
   205                        
   206 00:0200:              BUFFER          ds      128                     ; Command buffer
   207                        
   208                        ;===============================================================================
   209                        ; Initialisation
   210                        ;-------------------------------------------------------------------------------
   211                        
   212                                        code
   213                                        public  Start
   214                                        extern  UartRx
   215                                        extern  UartTx
   216                                        extern  UartRxTest
   217                                        extern  RomSelect
   218                                        extern  RomCheck
   219                        Start:
   220                                        short_a                         ; Configure register sizes
+  220 00:0000: E2 20                        sep     #M_FLAG
+  220                                        longa   off
   221                                        long_i
+  221 00:0002: C2 10                        rep     #X_FLAG
+  221                                        longi   on
   222 00:0004: 20 xx xx                     jsr     TxCRLF
   223 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
   224 00:000A: 20 xx xx                     jsr     TxStr
   225                        
   226 00:000D: 64 22                        stz     BANK                    ; Reset default bank
   227                        
   228                        ;===============================================================================
  Mon Jun 18 2018 21:48                                                                                                    Page 7


   229                        ; Command Processor
   230                        ;-------------------------------------------------------------------------------
   231                        
   232                        NewCommand:
   233 00:000F: 64 21                        stz     BUFLEN                  ; Clear the buffer
   234                        ShowCommand:
   235                                        short_i
+  235 00:0011: E2 10                        sep     #X_FLAG
+  235                                        longi   off
   236 00:0013: 20 xx xx                     jsr     TxCRLF                  ; Move to a new line
   237                        
   238 00:0016: A9 2E                        lda     #'.'                    ; Output the prompt
   239 00:0018: 20 xx xx                     jsr     UartTx
   240                        
   241 00:001B: A2 00                        ldx     #0
   242 00:001D: E4 21        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   243 00:001F: F0 0E                        beq     ReadCommand
   244 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   245 00:0024: 20 xx xx                     jsr     UartTx
   246 00:0027: E8                           inx
   247 00:0028: 80 F3                        bra     DisplayCmd
   248                        
   249                        RingBell:
   250 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   251 00:002C: 20 xx xx                     jsr     UartTx
   252                        
   253                        ReadCommand:
   254 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   255                        
   256 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   257 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   258 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   259 00:0038: F0 2D                        beq     ProcessCommand          ; Yes, start processing
   260                        
   261 00:003A: C9 08                        cmp     #BS                     ; Back space?
   262 00:003C: F0 15                        beq     BackSpace
   263 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   264 00:0040: F0 11                        beq     BackSpace
   265                        
   266 00:0042: C9 20                        cmp     #' '                    ; Printable character
   267 00:0044: 90 E4                        bcc     RingBell                ; No.
   268 00:0046: C9 7F                        cmp     #DEL
   269 00:0048: B0 E0                        bcs     RingBell                ; No.
   270 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save the character
   271 00:004D: E8                           inx
   272 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   273 00:0051: 80 DC                        bra     ReadCommand
   274                        
   275                        BackSpace:
   276 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   277 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
   278 00:0057: CA                           dex                             ; No, remove last character
   279 00:0058: A9 08                        lda     #BS
   280 00:005A: 20 xx xx                     jsr     UartTx
   281 00:005D: 20 xx xx                     jsr     TxSpace
   282 00:0060: A9 08                        lda     #BS
   283 00:0062: 20 xx xx                     jsr     UartTx
   284 00:0065: 80 C8                        bra     ReadCommand             ; And retry
  Mon Jun 18 2018 21:48                                                                                                    Page 8


   285                        
   286                        ProcessCommand:
   287 00:0067: 86 21                        stx     BUFLEN                  ; Save final length
   288 00:0069: A0 00                        ldy     #0                      ; Load index for start
   289                        
   290 00:006B: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   291 00:006E: B0 9F                        bcs     NewCommand              ; None, empty command
   292                        
   293                        ;===============================================================================
   294                        ; B - Select Memory Bank
   295                        ;-------------------------------------------------------------------------------
   296                        
   297 00:0070: C9 42                        cmp     #'B'                    ; Select memory bank?
   298 00:0072: D0 0D                        bne     NotMemoryBank
   299                        
   300 00:0074: A2 22                        ldx     #BANK                   ; Parse bank
   301 00:0076: 20 xx xx                     jsr     GetByte
   302 00:0079: 90 03                        bcc     $+5
   303 00:007B: 4C xx xx                     jmp     ShowError
   304 00:007E: 4C xx xx                     jmp     NewCommand
   305                        NotMemoryBank:
   306                        
   307                        ;===============================================================================
   308                        ; D - Disassemble Memory
   309                        ;-------------------------------------------------------------------------------
   310                        
   311 00:0081: C9 44                        cmp     #'D'                    ; Memory display?
   312 00:0083: D0 78                        bne     NotDisassemble
   313                        
   314 00:0085: A2 23                        ldx     #ADDR_S                 ; Parse start address
   315 00:0087: 20 xx xx                     jsr     GetAddr
   316 00:008A: 90 03                        bcc     $+5
   317 00:008C: 4C xx xx                     jmp     ShowError
   318 00:008F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   319 00:0091: 20 xx xx                     jsr     GetAddr
   320 00:0094: 90 03                        bcc     $+5
   321 00:0096: 4C xx xx                     jmp     ShowError
   322                        
   323 00:0099: 08                           php
   324 00:009A: 68                           pla
   325 00:009B: 85 20                        sta     FLAGS
   326                        
   327                        Disassemble:
   328 00:009D: 20 xx xx                     jsr     TxCRLF
   329 00:00A0: A5 25                        lda     ADDR_S+2                ; Show memory address
   330 00:00A2: 20 xx xx                     jsr     TxHex2
   331 00:00A5: A9 3A                        lda     #':'
   332 00:00A7: 20 xx xx                     jsr     UartTx
   333 00:00AA: A5 24                        lda     ADDR_S+1
   334 00:00AC: 20 xx xx                     jsr     TxHex2
   335 00:00AF: A5 23                        lda     ADDR_S+0
   336 00:00B1: 20 xx xx                     jsr     TxHex2
   337 00:00B4: 20 xx xx                     jsr     TxSpace
   338                        
   339 00:00B7: 20 xx xx                     jsr     TxCodeBytes             ; Show code bytes
   340 00:00BA: 20 xx xx                     jsr     TxSymbolic              ; And instruction
   341                        
   342 00:00BD: A7 23                        lda     [ADDR_S]                ; Fetch opcode again
  Mon Jun 18 2018 21:48                                                                                                    Page 9


   343 00:00BF: 48                           pha
   344 00:00C0: A0 01                        ldy     #1
   345                        
   346 00:00C2: C9 18                        cmp     #$18                    ; CLC?
   347 00:00C4: D0 04                        bne     NotCLC
   348 00:00C6: A9 01                        lda     #C_FLAG
   349 00:00C8: 80 0E                        bra     DoREP
   350                        NotCLC:
   351 00:00CA: C9 38                        cmp     #$38                    ; SEC?
   352 00:00CC: D0 04                        bne     NotSEC
   353 00:00CE: A9 01                        lda     #C_FLAG
   354 00:00D0: 80 10                        bra     DoSEP
   355                        NotSEC:
   356 00:00D2: C9 C2                        cmp     #$c2                    ; REP?
   357 00:00D4: D0 06                        bne     NotREP
   358 00:00D6: B7 23                        lda     [ADDR_S],Y
   359 00:00D8: 14 20        DoREP:          trb     FLAGS
   360 00:00DA: 80 08                        bra     NextOpcode
   361                        NotREP:
   362 00:00DC: C9 E2                        cmp     #$e2                    ; SEP?
   363 00:00DE: D0 04                        bne     NextOpcode
   364 00:00E0: B7 23                        lda     [ADDR_S],Y
   365 00:00E2: 04 20        DoSEP:          tsb     FLAGS
   366                        
   367                        NextOpcode:
   368 00:00E4: 68                           pla
   369 00:00E5: 20 xx xx                     jsr     OpcodeSize
   370                        
   371 00:00E8: 18                           clc
   372 00:00E9: 65 23                        adc     ADDR_S+0                ; And move start address on
   373 00:00EB: 85 23                        sta     ADDR_S+0
   374 00:00ED: 90 02                        bcc     $+4
   375 00:00EF: E6 24                        inc     ADDR_S+1
   376                        
   377 00:00F1: 38                           sec                             ; Exceeded the end address?
   378 00:00F2: E5 26                        sbc     ADDR_E+0
   379 00:00F4: A5 24                        lda     ADDR_S+1
   380 00:00F6: E5 27                        sbc     ADDR_E+1
   381 00:00F8: 30 A3                        bmi     Disassemble             ; No, show more
   382                        
   383 00:00FA: 4C xx xx                     jmp     NewCommand              ; Done
   384                        NotDisassemble:
   385                        
   386                        ;===============================================================================
   387                        ; E - Erase ROM bank
   388                        ;-------------------------------------------------------------------------------
   389                        
   390 00:00FD: C9 45                        cmp     #'E'                    ; Erase bank?
   391 00:00FF: D0 45                        bne     NotEraseBank
   392                        
   393 00:0101: 20 xx xx                     jsr     CheckSafe
   394                        
   395                                        ifdef   W65C265SXB
   396                                        lda     BCR                     ; Save mask rom state
   397                                        pha
   398                                        lda     #$80                    ; Then ensure disabled
   399                                        tsb     BCR
   400                                        endif
  Mon Jun 18 2018 21:48                                                                                                    Page 10


   401                        
   402 00:0104: A9 00                        lda     #$00                    ; Set start address
   403 00:0106: 85 23                        sta     ADDR_S+0
   404 00:0108: A9 80                        lda     #$80
   405 00:010A: 85 24                        sta     ADDR_S+1
   406                        EraseLoop:
   407 00:010C: A9 AA                        lda     #$aa                    ; Unlock flash
   408 00:010E: 8D 55 D5                     sta     $8000+$5555
   409 00:0111: A9 55                        lda     #$55
   410 00:0113: 8D AA AA                     sta     $8000+$2aaa
   411 00:0116: A9 80                        lda     #$80                    ; Signal erase
   412 00:0118: 8D 55 D5                     sta     $8000+$5555
   413 00:011B: A9 AA                        lda     #$aa
   414 00:011D: 8D 55 D5                     sta     $8000+$5555
   415 00:0120: A9 55                        lda     #$55
   416 00:0122: 8D AA AA                     sta     $8000+$2aaa
   417 00:0125: A9 30                        lda     #$30                    ; Sector erase
   418 00:0127: 92 23                        sta     (ADDR_S)
   419                        
   420                        EraseWait:
   421 00:0129: B2 23                        lda     (ADDR_S)                ; Wait for erase to finish
   422 00:012B: C9 FF                        cmp     #$FF
   423 00:012D: D0 FA                        bne     EraseWait
   424                        
   425 00:012F: 18                           clc                             ; Move to next sector
   426 00:0130: A5 24                        lda     ADDR_S+1
   427 00:0132: 69 10                        adc     #$10
   428 00:0134: 85 24                        sta     ADDR_S+1
   429 00:0136: 90 D4                        bcc     EraseLoop               ; Repeat until end of memory
   430                        
   431                                        ifdef   W65C265SXB
   432                                        pla                             ; Restore mask ROM state
   433                                        sta     BCR
   434                                        endif
   435                        
   436 00:0138: 4C xx xx                     jmp     NewCommand              ; And start over
   437                        
   438                        EraseFailed:
   439                                        long_i                          ; Warn that erase failed
+  439 00:013B: C2 10                        rep     #X_FLAG
+  439                                        longi   on
   440 00:013D: A2 xx xx                     ldx     #ERASE_FAILED
   441 00:0140: 20 xx xx                     jsr     TxStr
   442                                        longi   off
   443 00:0143: 4C xx xx                     jmp     NewCommand              ; And start over
   444                        NotEraseBank:
   445                        
   446                        ;===============================================================================
   447                        ; F - WDC Mask ROM Enable/Disable
   448                        ;-------------------------------------------------------------------------------
   449                        
   450                                        ifdef   W65C265SXB
   451                                        cmp     #'F'
   452                                        bne     NotMaskROM
   453                        
   454                                        jsr     SkipSpaces              ; Find first argument
   455                                        bcs     MaskFail                ; Success?
   456                        
  Mon Jun 18 2018 21:48                                                                                                    Page 11


   457                                        cmp     #'0'                    ; Check bank is 0..3
   458                                        beq     MaskOff
   459                                        cmp     #'1'
   460                                        beq     MaskOn
   461                        MaskFail:
   462                                        jmp     ShowError
   463                        
   464                        MaskOn:
   465                                        lda     #$80                    ; Enable mask ROM
   466                                        trb     BCR
   467                                        jmp     NewCommand
   468                        
   469                        MaskOff:
   470                                        lda     #$80                    ; Disable mask ROM
   471                                        tsb     BCR
   472                                        jmp     NewCommand
   473                        
   474                        NotMaskROM:
   475                                        endif
   476                        
   477                        ;===============================================================================
   478                        ; G - Goto
   479                        ;-------------------------------------------------------------------------------
   480                        
   481 00:0146: C9 47                        cmp     #'G'                    ; Invoke code
   482 00:0148: D0 0D                        bne     NotGoto
   483                        
   484 00:014A: A2 23                        ldx     #ADDR_S                 ; Parse execution address
   485 00:014C: 20 xx xx                     jsr     GetAddr
   486 00:014F: B0 03                        bcs     $+5
   487 00:0151: DC 23 00                     jmp     [ADDR_S]                ; Run from address
   488 00:0154: 6C FC FF                     jmp     ($FFFC)                 ; Otherwise reset
   489                        NotGoto:
   490                        
   491                        ;===============================================================================
   492                        ; H - Hunt for RAM
   493                        ;-------------------------------------------------------------------------------
   494                        
   495 00:0157: C9 48                        cmp     #'H'                    ; Hunt for RAM
   496 00:0159: F0 03                        beq     $+5
   497 00:015B: 4C xx xx                     jmp     NotHunt
   498                        
   499 00:015E: 64 23                        stz     ADDR_S+0                ; Start at $00:0000
   500 00:0160: 64 24                        stz     ADDR_S+1
   501 00:0162: 64 25                        stz     ADDR_S+2
   502                        
   503                        HuntStart:
   504 00:0164: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   505 00:0166: 48                           pha
   506 00:0167: 49 FF                        eor     #$ff
   507 00:0169: 87 23                        sta     [ADDR_S]
   508 00:016B: C7 23                        cmp     [ADDR_S]
   509 00:016D: F0 11                        beq     HuntFound               ; Yes
   510                        
   511 00:016F: 68                           pla
   512 00:0170: 18                           clc                             ; Try the next block
   513 00:0171: A5 24                        lda     ADDR_S+1
   514 00:0173: 69 10                        adc     #$10
  Mon Jun 18 2018 21:48                                                                                                    Page 12


   515 00:0175: 85 24                        sta     ADDR_S+1
   516 00:0177: 90 EB                        bcc     HuntStart
   517 00:0179: E6 25                        inc     ADDR_S+2
   518 00:017B: D0 E7                        bne     HuntStart
   519 00:017D: 4C xx xx                     jmp     NewCommand              ; Reached end of RAM
   520                        
   521                        HuntFound:
   522 00:0180: 20 xx xx                     jsr     TxCRLF
   523 00:0183: A5 25                        lda     ADDR_S+2                ; Print start address
   524 00:0185: 20 xx xx                     jsr     TxHex2
   525 00:0188: A9 3A                        lda     #':'
   526 00:018A: 20 xx xx                     jsr     UartTx
   527 00:018D: A5 24                        lda     ADDR_S+1
   528 00:018F: 20 xx xx                     jsr     TxHex2
   529 00:0192: A5 23                        lda     ADDR_S+0
   530 00:0194: 20 xx xx                     jsr     TxHex2
   531                        
   532 00:0197: A9 2D                        lda     #'-'
   533 00:0199: 20 xx xx                     jsr     UartTx
   534                        
   535                        HuntEnd:
   536 00:019C: 68                           pla                             ; Restore memory bytes
   537 00:019D: 87 23                        sta     [ADDR_S]
   538 00:019F: 18                           clc                             ; Try the next block
   539 00:01A0: A5 24                        lda     ADDR_S+1
   540 00:01A2: 69 10                        adc     #$10
   541 00:01A4: 85 24                        sta     ADDR_S+1
   542 00:01A6: 90 04                        bcc     HuntNext
   543 00:01A8: E6 25                        inc     ADDR_S+2
   544 00:01AA: F0 2D                        beq     HuntDone
   545                        
   546                        HuntNext
   547 00:01AC: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   548 00:01AE: 48                           pha
   549 00:01AF: 49 FF                        eor     #$ff
   550 00:01B1: 87 23                        sta     [ADDR_S]
   551 00:01B3: C7 23                        cmp     [ADDR_S]
   552 00:01B5: F0 E5                        beq     HuntEnd                 ; Yes, keep looking
   553                        
   554 00:01B7: 68                           pla
   555 00:01B8: 38                           sec                             ; Print end address
   556 00:01B9: A5 23                        lda     ADDR_S+0
   557 00:01BB: E9 01                        sbc     #1
   558 00:01BD: 48                           pha
   559 00:01BE: A5 24                        lda     ADDR_S+1
   560 00:01C0: E9 00                        sbc     #0
   561 00:01C2: 48                           pha
   562 00:01C3: A5 25                        lda     ADDR_S+2
   563 00:01C5: E9 00                        sbc     #0
   564 00:01C7: 20 xx xx                     jsr     TxHex2
   565 00:01CA: A9 3A                        lda     #':'
   566 00:01CC: 20 xx xx                     jsr     UartTx
   567 00:01CF: 68                           pla
   568 00:01D0: 20 xx xx                     jsr     TxHex2
   569 00:01D3: 68                           pla
   570 00:01D4: 20 xx xx                     jsr     TxHex2
   571 00:01D7: 80 8B                        bra     HuntStart
   572                        
  Mon Jun 18 2018 21:48                                                                                                    Page 13


   573                        HuntDone:
   574 00:01D9: A9 FF                        lda     #$ff                    ; Pring FF:FFFF
   575 00:01DB: 48                           pha
   576 00:01DC: 48                           pha
   577 00:01DD: 20 xx xx                     jsr     TxHex2
   578 00:01E0: A9 3A                        lda     #':'
   579 00:01E2: 20 xx xx                     jsr     UartTx
   580 00:01E5: 68                           pla
   581 00:01E6: 20 xx xx                     jsr     TxHex2
   582 00:01E9: 68                           pla
   583 00:01EA: 20 xx xx                     jsr     TxHex2
   584 00:01ED: 4C xx xx                     jmp     NewCommand
   585                        NotHunt:
   586                        
   587                        ;===============================================================================
   588                        ; M - Display Memory
   589                        ;-------------------------------------------------------------------------------
   590                        
   591 00:01F0: C9 4D                        cmp     #'M'                    ; Memory display?
   592 00:01F2: D0 70                        bne     NotMemoryDisplay
   593                        
   594 00:01F4: A2 23                        ldx     #ADDR_S                 ; Parse start address
   595 00:01F6: 20 xx xx                     jsr     GetAddr
   596 00:01F9: 90 03                        bcc     $+5
   597 00:01FB: 4C xx xx                     jmp     ShowError
   598 00:01FE: A2 26                        ldx     #ADDR_E                 ; Parse end address
   599 00:0200: 20 xx xx                     jsr     GetAddr
   600 00:0203: 90 03                        bcc     $+5
   601 00:0205: 4C xx xx                     jmp     ShowError
   602                        
   603                        DisplayMemory:
   604 00:0208: 20 xx xx                     jsr     TxCRLF
   605 00:020B: A5 25                        lda     ADDR_S+2                ; Show memory address
   606 00:020D: 20 xx xx                     jsr     TxHex2
   607 00:0210: A9 3A                        lda     #':'
   608 00:0212: 20 xx xx                     jsr     UartTx
   609 00:0215: A5 24                        lda     ADDR_S+1
   610 00:0217: 20 xx xx                     jsr     TxHex2
   611 00:021A: A5 23                        lda     ADDR_S+0
   612 00:021C: 20 xx xx                     jsr     TxHex2
   613                        
   614 00:021F: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   615 00:0221: 20 xx xx     ByteLoop:       jsr     TxSpace
   616 00:0224: B7 23                        lda     [ADDR_S],y
   617 00:0226: 20 xx xx                     jsr     TxHex2
   618 00:0229: C8                           iny
   619 00:022A: C0 10                        cpy     #16
   620 00:022C: D0 F3                        bne     ByteLoop
   621                        
   622 00:022E: 20 xx xx                     jsr     TxSpace
   623 00:0231: A9 7C                        lda     #'|'
   624 00:0233: 20 xx xx                     jsr     UartTx
   625 00:0236: A0 00                        ldy     #0                      ; Show sixteen characters
   626 00:0238: B7 23        CharLoop:       lda     [ADDR_S],Y
   627 00:023A: 20 xx xx                     jsr     IsPrintable
   628 00:023D: B0 02                        bcs     $+4
   629 00:023F: A9 2E                        lda     #'.'
   630 00:0241: 20 xx xx                     jsr     UartTx
  Mon Jun 18 2018 21:48                                                                                                    Page 14


   631 00:0244: C8                           iny
   632 00:0245: C0 10                        cpy     #16
   633 00:0247: D0 EF                        bne     CharLoop
   634 00:0249: A9 7C                        lda     #'|'
   635 00:024B: 20 xx xx                     jsr     UartTx
   636                        
   637 00:024E: 18                           clc                             ; Bump the display address
   638 00:024F: 98                           tya
   639 00:0250: 65 23                        adc     ADDR_S+0
   640 00:0252: 85 23                        sta     ADDR_S+0
   641 00:0254: 90 02                        bcc     $+4
   642 00:0256: E6 24                        inc     ADDR_S+1
   643                        
   644 00:0258: 38                           sec                             ; Exceeded the end address?
   645 00:0259: E5 26                        sbc     ADDR_E+0
   646 00:025B: A5 24                        lda     ADDR_S+1
   647 00:025D: E5 27                        sbc     ADDR_E+1
   648 00:025F: 30 A7                        bmi     DisplayMemory           ; No, show more
   649                        
   650 00:0261: 4C xx xx                     jmp     NewCommand
   651                        NotMemoryDisplay:
   652                        
   653                        ;===============================================================================
   654                        ; R - Select ROM Bank
   655                        ;-------------------------------------------------------------------------------
   656                        
   657 00:0264: C9 52                        cmp     #'R'                    ; ROM Bank?
   658 00:0266: D0 16                        bne     NotROMBank              ; No
   659                        
   660 00:0268: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   661 00:026B: 90 03                        bcc     $+5                     ; Success?
   662 00:026D: 4C xx xx     BankFail:       jmp     ShowError               ; No
   663                        
   664 00:0270: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   665 00:0272: 90 F9                        bcc     BankFail
   666 00:0274: C9 34                        cmp     #'3'+1
   667 00:0276: B0 F5                        bcs     BankFail
   668                        
   669 00:0278: 20 xx xx                     jsr     RomSelect               ; Switch ROM banks
   670 00:027B: 4C xx xx                     jmp     NewCommand              ; Done
   671                        NotROMBank:
   672                        
   673                        ;===============================================================================
   674                        ; S - S19 Record
   675                        ;-------------------------------------------------------------------------------
   676                        
   677 00:027E: C9 53                        cmp     #'S'                    ; S19?
   678 00:0280: F0 03                        beq     $+5
   679 00:0282: 4C xx xx                     jmp     NotS19
   680                        
   681 00:0285: 20 xx xx                     jsr     NextChar                ; Get record type
   682 00:0288: B0 75                        bcs     S19Fail
   683 00:028A: C9 31                        cmp     #'1'                    ; Only process type 1
   684 00:028C: D0 6E                        bne     S19Done
   685                        
   686 00:028E: A2 26                        ldx     #ADDR_E                 ; Get byte count
   687 00:0290: 20 xx xx                     jsr     GetByte
   688 00:0293: B0 6A                        bcs     S19Fail
  Mon Jun 18 2018 21:48                                                                                                    Page 15


   689 00:0295: A5 26                        lda     ADDR_E                  ; Use as initial checksum
   690 00:0297: 85 2B                        sta     SUM
   691 00:0299: C6 26                        dec     ADDR_E
   692 00:029B: F0 62                        beq     S19Fail
   693                        
   694 00:029D: A2 23                        ldx     #ADDR_S                 ; Get address
   695 00:029F: 20 xx xx                     jsr     GetAddr
   696 00:02A2: B0 5B                        bcs     S19Fail
   697 00:02A4: A5 23                        lda     ADDR_S+0                ; Add to checksum
   698 00:02A6: 65 24                        adc     ADDR_S+1
   699 00:02A8: 18                           clc
   700 00:02A9: 65 2B                        adc     SUM
   701 00:02AB: 85 2B                        sta     SUM
   702 00:02AD: C6 26                        dec     ADDR_E
   703 00:02AF: F0 4E                        beq     S19Fail
   704 00:02B1: C6 26                        dec     ADDR_E
   705 00:02B3: F0 4A                        beq     S19Fail
   706                        
   707                        S19Load:
   708 00:02B5: A2 2C                        ldx     #TEMP                   ; Fetch a data byte
   709 00:02B7: 20 xx xx                     jsr     GetByte
   710 00:02BA: B0 43                        bcs     S19Fail
   711 00:02BC: A5 2C                        lda     TEMP
   712 00:02BE: 65 2B                        adc     SUM
   713 00:02C0: 85 2B                        sta     SUM
   714 00:02C2: C6 26                        dec     ADDR_E
   715 00:02C4: F0 39                        beq     S19Fail
   716                        
   717 00:02C6: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   718 00:02C8: D0 13                        bne     WriteS19                ; No
   719 00:02CA: A5 24                        lda     ADDR_S+1
   720 00:02CC: 10 0F                        bpl     WriteS19                ; No
   721                        
   722                                        ifdef   W65C265SXB
   723                                        cmp     #$df                    ; Register page?
   724                                        beq     NoWrite
   725                                        endif
   726                        
   727 00:02CE: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   728 00:02D0: 8D 55 D5                     sta     $8000+$5555
   729 00:02D3: A9 55                        lda     #$55
   730 00:02D5: 8D AA AA                     sta     $8000+$2aaa
   731 00:02D8: A9 A0                        lda     #$a0                    ; Start byte write
   732 00:02DA: 8D 55 D5                     sta     $8000+$5555
   733                        WriteS19:
   734 00:02DD: A5 2C                        lda     TEMP                    ; Write the value
   735 00:02DF: 87 23                        sta     [ADDR_S]
   736                        
   737                        NoWrite:
   738 00:02E1: E6 23                        inc     ADDR_S+0                ; Bump address by one
   739 00:02E3: D0 02                        bne     $+4
   740 00:02E5: E6 24                        inc     ADDR_S+1
   741                        
   742 00:02E7: A5 26                        lda     ADDR_E                  ; Reached checksum?
   743 00:02E9: C9 01                        cmp     #1
   744 00:02EB: D0 C8                        bne     S19Load
   745                        
   746 00:02ED: A2 2C                        ldx     #TEMP                   ; Yes, read it
  Mon Jun 18 2018 21:48                                                                                                    Page 16


   747 00:02EF: 20 xx xx                     jsr     GetByte
   748 00:02F2: B0 0B                        bcs     S19Fail
   749 00:02F4: A5 2C                        lda     TEMP
   750 00:02F6: 65 2B                        adc     SUM
   751 00:02F8: C9 FF                        cmp     #$ff                    ; Checksum correct?
   752 00:02FA: D0 03                        bne     S19Fail
   753                        
   754 00:02FC: 4C xx xx     S19Done:        jmp     NewCommand              ; Get
   755                        
   756                        S19Fail:
   757                                        long_i                          ; Display error message
+  757 00:02FF: C2 10                        rep     #X_FLAG
+  757                                        longi   on
   758 00:0301: A2 xx xx                     ldx     #INVALID_S19
   759 00:0304: 20 xx xx                     jsr     TxStr
   760                                        longi   off
   761 00:0307: 4C xx xx                     jmp     NewCommand              ; And start over
   762                        NotS19:
   763                        
   764                        ;===============================================================================
   765                        ; W - Write memory
   766                        ;-------------------------------------------------------------------------------
   767                        
   768 00:030A: C9 57                        cmp     #'W'                    ; Write memory?
   769 00:030C: D0 58                        bne     NotWrite
   770                        
   771 00:030E: A2 23                        ldx     #ADDR_S                 ; Parse start address
   772 00:0310: 20 xx xx                     jsr     GetAddr
   773 00:0313: 90 03                        bcc     $+5
   774 00:0315: 4C xx xx                     jmp     ShowError
   775                        
   776 00:0318: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   777 00:031A: 10 03                        bpl     $+5
   778 00:031C: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   779                        
   780 00:031F: A2 26                        ldx     #ADDR_E                 ; Parse value byte
   781 00:0321: 20 xx xx                     jsr     GetByte                 ; Is there a value?
   782 00:0324: 90 03                        bcc     $+5
   783 00:0326: 4C xx xx                     jmp     NewCommand              ; No.
   784                        
   785 00:0329: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   786 00:032B: D0 13                        bne     WriteMemory             ; No
   787 00:032D: 24 24                        bit     ADDR_S+1
   788 00:032F: 10 0F                        bpl     WriteMemory             ; No
   789                        
   790 00:0331: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   791 00:0333: 8D 55 D5                     sta     $8000+$5555
   792 00:0336: A9 55                        lda     #$55
   793 00:0338: 8D AA AA                     sta     $8000+$2aaa
   794 00:033B: A9 A0                        lda     #$a0                    ; Start byte write
   795 00:033D: 8D 55 D5                     sta     $8000+$5555
   796                        WriteMemory:
   797 00:0340: A5 26                        lda     ADDR_E                  ; Write the value
   798 00:0342: 87 23                        sta     [ADDR_S]
   799                        
   800 00:0344: E6 23                        inc     ADDR_S+0                ; Bump address by one
   801 00:0346: D0 02                        bne     $+4
   802 00:0348: E6 24                        inc     ADDR_S+1
  Mon Jun 18 2018 21:48                                                                                                    Page 17


   803                        
   804 00:034A: A9 57                        lda     #'W'                    ; Build command for next byte
   805 00:034C: 20 xx xx                     jsr     StartCommand
   806 00:034F: A9 20                        lda     #' '
   807 00:0351: 20 xx xx                     jsr     BuildCommand
   808 00:0354: A5 24                        lda     ADDR_S+1                ; Add the next address
   809 00:0356: 20 xx xx                     jsr     BuildByte
   810 00:0359: A5 23                        lda     ADDR_S+0
   811 00:035B: 20 xx xx                     jsr     BuildByte
   812 00:035E: A9 20                        lda     #' '
   813 00:0360: 20 xx xx                     jsr     BuildCommand
   814 00:0363: 4C xx xx                     jmp     ShowCommand             ; And prompt for data
   815                        
   816                        NotWrite:
   817                        
   818                        ;===============================================================================
   819                        ; X - XMODEM Receive
   820                        ;-------------------------------------------------------------------------------
   821                        
   822 00:0366: C9 58                        cmp     #'X'                    ; XModem upload?
   823 00:0368: F0 03                        beq     $+5                     ; Yes.
   824 00:036A: 4C xx xx                     jmp     NotXModem
   825                        
   826 00:036D: A2 23                        ldx     #ADDR_S                 ; Parse start address
   827 00:036F: 20 xx xx                     jsr     GetAddr
   828 00:0372: 90 03                        bcc     $+5
   829 00:0374: 4C xx xx                     jmp     ShowError
   830                        
   831 00:0377: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   832 00:0379: 10 03                        bpl     $+5
   833 00:037B: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   834                        
   835                                        long_i                          ; Display waiting message
+  835 00:037E: C2 10                        rep     #X_FLAG
+  835                                        longi   on
   836 00:0380: A2 xx xx                     ldx     #WAITING
   837 00:0383: 20 xx xx                     jsr     TxStr
   838 00:0386: 20 xx xx                     jsr     TxCRLF
   839                                        short_i
+  839 00:0389: E2 10                        sep     #X_FLAG
+  839                                        longi   off
   840 00:038B: 64 29                        stz     BLOCK                   ; Reset the block number
   841 00:038D: E6 29                        inc     BLOCK
   842                        
   843                        ResetRetries:
   844 00:038F: A9 0A                        lda     #10                     ; Reset the retry counter
   845 00:0391: 85 2A                        sta     RETRIES
   846                        
   847                        TransferWait:
   848 00:0393: 64 2C                        stz     TEMP+0                  ; Clear timeout counter
   849 00:0395: 64 2D                        stz     TEMP+1
   850 00:0397: A9 EC                        lda     #-20
   851 00:0399: 85 2E                        sta     TEMP+2
   852                        TransferPoll:
   853 00:039B: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   854 00:039E: B0 20                        bcs     TransferScan
   855 00:03A0: E6 2C                        inc     TEMP+0
   856 00:03A2: D0 F7                        bne     TransferPoll
  Mon Jun 18 2018 21:48                                                                                                    Page 18


   857 00:03A4: E6 2D                        inc     TEMP+1
   858 00:03A6: D0 F3                        bne     TransferPoll
   859 00:03A8: E6 2E                        inc     TEMP+2
   860 00:03AA: D0 EF                        bne     TransferPoll
   861 00:03AC: C6 2A                        dec     RETRIES
   862 00:03AE: F0 05                        beq     TimedOut
   863 00:03B0: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   864 00:03B3: 80 DE                        bra     TransferWait
   865                        
   866                        TimedOut:
   867                                        long_i
+  867 00:03B5: C2 10                        rep     #X_FLAG
+  867                                        longi   on
   868 00:03B7: A2 xx xx                     ldx     #TIMEOUT
   869 00:03BA: 20 xx xx                     jsr     TxStr
   870                                        longi   off
   871 00:03BD: 4C xx xx                     jmp     NewCommand
   872                        
   873                        TransferScan:
   874 00:03C0: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   875 00:03C3: C9 04                        cmp     #EOT
   876 00:03C5: F0 66                        beq     TransferDone
   877 00:03C7: C9 01                        cmp     #SOH
   878 00:03C9: D0 C8                        bne     TransferWait
   879 00:03CB: 20 xx xx                     jsr     UartRx                  ; Check the block number
   880 00:03CE: C5 29                        cmp     BLOCK
   881 00:03D0: D0 55                        bne     TransferError
   882 00:03D2: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   883 00:03D5: 49 FF                        eor     #$ff
   884 00:03D7: C5 29                        cmp     BLOCK
   885 00:03D9: D0 4C                        bne     TransferError
   886                        
   887 00:03DB: A0 00                        ldy     #0
   888 00:03DD: 84 2B                        sty     SUM                     ; Clear the check sum
   889                        TransferBlock:
   890 00:03DF: 20 xx xx                     jsr     UartRx
   891 00:03E2: 48                           pha
   892                        
   893 00:03E3: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   894 00:03E5: D0 13                        bne     WriteByte               ; No
   895 00:03E7: A5 24                        lda     ADDR_S+1
   896 00:03E9: 10 0F                        bpl     WriteByte               ; No
   897                        
   898                                        ifdef   W65C265SXB
   899                                        cmp     #$df                    ; Register page?
   900                                        beq     WriteSkip
   901                                        endif
   902                        
   903 00:03EB: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   904 00:03ED: 8D 55 D5                     sta     $8000+$5555
   905 00:03F0: A9 55                        lda     #$55
   906 00:03F2: 8D AA AA                     sta     $8000+$2aaa
   907 00:03F5: A9 A0                        lda     #$a0                    ; Start byte write
   908 00:03F7: 8D 55 D5                     sta     $8000+$5555
   909                        
   910                        WriteByte:
   911 00:03FA: 68                           pla
   912 00:03FB: 97 23                        sta     [ADDR_S],Y
  Mon Jun 18 2018 21:48                                                                                                    Page 19


   913                        
   914                        WriteWait:
   915 00:03FD: D7 23                        cmp     [ADDR_S],Y              ; Wait for write
   916 00:03FF: D0 FC                        bne     WriteWait
   917 00:0401: 80 01                        bra     $+3
   918                        
   919                        WriteSkip:
   920 00:0403: 68                           pla
   921                        
   922 00:0404: 18                           clc                             ; Add to check sum
   923 00:0405: 65 2B                        adc     SUM
   924 00:0407: 85 2B                        sta     SUM
   925 00:0409: C8                           iny
   926 00:040A: C0 80                        cpy     #128
   927 00:040C: D0 D1                        bne     TransferBlock
   928 00:040E: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   929 00:0411: C5 2B                        cmp     SUM
   930 00:0413: D0 12                        bne     TransferError           ; Failed
   931 00:0415: 18                           clc
   932 00:0416: 98                           tya
   933 00:0417: 65 23                        adc     ADDR_S+0                ; Bump address one block
   934 00:0419: 85 23                        sta     ADDR_S+0
   935 00:041B: 90 02                        bcc     $+4
   936 00:041D: E6 24                        inc     ADDR_S+1
   937                        
   938 00:041F: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   939 00:0422: E6 29                        inc     BLOCK                   ; Bump block number
   940 00:0424: 4C xx xx                     jmp     TransferWait
   941                        
   942                        TransferError;
   943 00:0427: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   944 00:042A: 4C xx xx                     jmp     TransferWait            ; And try again
   945                        
   946                        TransferDone:
   947 00:042D: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   948 00:0430: 4C xx xx                     jmp     NewCommand              ; Done
   949                        
   950                        SendACK:
   951 00:0433: A9 06                        lda     #ACK
   952 00:0435: 4C xx xx                     jmp     UartTx
   953                        
   954                        SendNAK:
   955 00:0438: A9 15                        lda     #NAK
   956 00:043A: 4C xx xx                     jmp     UartTx
   957                        
   958                        NotXModem:
   959                        
   960                        ;===============================================================================
   961                        ; ? - Help
   962                        ;-------------------------------------------------------------------------------
   963                        
   964 00:043D: C9 3F                        cmp     #'?'                    ; Help command?
   965 00:043F: D0 0B                        bne     NotHelp
   966                        
   967                                        long_i
+  967 00:0441: C2 10                        rep     #X_FLAG
+  967                                        longi   on
   968 00:0443: A2 xx xx                     ldx     #HELP                   ; Output help string
  Mon Jun 18 2018 21:48                                                                                                    Page 20


   969 00:0446: 20 xx xx                     jsr     TxStr
   970                                        longi   off
   971 00:0449: 4C xx xx                     jmp     NewCommand
   972                        NotHelp:
   973                        
   974                        ;-------------------------------------------------------------------------------
   975                        
   976                        ShowError:
   977                                        long_i
+  977 00:044C: C2 10                        rep     #X_FLAG
+  977                                        longi   on
   978 00:044E: A2 xx xx                     ldx     #ERROR                  ; Output error message
   979 00:0451: 20 xx xx                     jsr     TxStr
   980                                        longi   off
   981 00:0454: 4C xx xx                     jmp     NewCommand
   982                        
   983                        ;===============================================================================
   984                        ;-------------------------------------------------------------------------------
   985                        
   986                        ; Checks if an expendable ROM bank is currently selected. If the bank with the
   987                        ; WDC firmware is selected then warn and accept a new command.
   988                        
   989                        CheckSafe:
   990 00:0457: 20 xx xx                     jsr     RomCheck                ; WDC ROM selected?
   991 00:045A: F0 01                        beq     $+3
   992 00:045C: 60                           rts                             ; No, save to change
   993                        
   994 00:045D: 68                           pla                             ; Discard return address
   995 00:045E: 68                           pla
   996                                        long_i                          ; Complain about bank
+  996 00:045F: C2 10                        rep     #X_FLAG
+  996                                        longi   on
   997 00:0461: A2 xx xx                     ldx     #NOT_SAFE
   998 00:0464: 20 xx xx                     jsr     TxStr
   999                                        longi   off
  1000 00:0467: 4C xx xx                     jmp     NewCommand              ; And start over
  1001                        
  1002                        ;===============================================================================
  1003                        ; Byte and Word Parsing
  1004                        ;-------------------------------------------------------------------------------
  1005                        
  1006                        ; Parse a hex byte from the command line and store it at the location indicated
  1007                        ; by the X register.
  1008                        
  1009                        GetByte:
  1010 00:046A: 9E 00 00                     stz     0,x                     ; Set the target address
  1011 00:046D: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
  1012 00:0470: 90 01                        bcc     $+3
  1013 00:0472: 60                           rts                             ; None found
  1014 00:0473: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
  1015 00:0476: 90 12                        bcc     ByteFail
  1016 00:0478: 20 xx xx                     jsr     AddDigit
  1017 00:047B: 20 xx xx                     jsr     NextChar
  1018 00:047E: B0 08                        bcs     ByteDone
  1019 00:0480: 20 xx xx                     jsr     IsHexDigit
  1020 00:0483: 90 03                        bcc     ByteDone
  1021 00:0485: 20 xx xx                     jsr     AddDigit
  1022 00:0488: 18           ByteDone:       clc
  Mon Jun 18 2018 21:48                                                                                                    Page 21


  1023 00:0489: 60                           rts
  1024 00:048A: 38           ByteFail:       sec
  1025 00:048B: 60                           rts
  1026                        
  1027                        ; Parse an address from the command line and store it at the location indicated
  1028                        ; by the X register.
  1029                        
  1030                        GetAddr:
  1031 00:048C: 9E 00 00                     stz     0,x                     ; Set the target address
  1032 00:048F: 9E 01 00                     stz     1,x
  1033 00:0492: A5 22                        lda     BANK
  1034 00:0494: 9D 02 00                     sta     2,x
  1035 00:0497: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
  1036 00:049A: 90 01                        bcc     $+3
  1037 00:049C: 60                           rts                             ; None found
  1038                        
  1039 00:049D: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
  1040 00:04A0: 90 2C                        bcc     AddrFail
  1041 00:04A2: 20 xx xx                     jsr     AddDigit
  1042 00:04A5: 20 xx xx                     jsr     NextChar
  1043 00:04A8: B0 22                        bcs     AddrDone
  1044 00:04AA: 20 xx xx                     jsr     IsHexDigit
  1045 00:04AD: 90 1D                        bcc     AddrDone
  1046 00:04AF: 20 xx xx                     jsr     AddDigit
  1047 00:04B2: 20 xx xx                     jsr     NextChar
  1048 00:04B5: B0 15                        bcs     AddrDone
  1049 00:04B7: 20 xx xx                     jsr     IsHexDigit
  1050 00:04BA: 90 10                        bcc     AddrDone
  1051 00:04BC: 20 xx xx                     jsr     AddDigit
  1052 00:04BF: 20 xx xx                     jsr     NextChar
  1053 00:04C2: B0 08                        bcs     AddrDone
  1054 00:04C4: 20 xx xx                     jsr     IsHexDigit
  1055 00:04C7: 90 03                        bcc     AddrDone
  1056 00:04C9: 20 xx xx                     jsr     AddDigit
  1057 00:04CC: 18           AddrDone:       clc                             ; Carry clear got an address
  1058 00:04CD: 60                           rts
  1059 00:04CE: 38           AddrFail:       sec                             ; Carry set -- failed.
  1060 00:04CF: 60                           rts
  1061                        
  1062                        ; Add a hex digit to the 16-bit value being build at at the location indicated
  1063                        ; by X.
  1064                        
  1065                        AddDigit:
  1066 00:04D0: 38                           sec                             ; Convert ASCII to binary
  1067 00:04D1: E9 30                        sbc     #'0'
  1068 00:04D3: C9 0A                        cmp     #$0a
  1069 00:04D5: 90 02                        bcc     $+4
  1070 00:04D7: E9 07                        sbc     #7
  1071                        
  1072 00:04D9: 1E 00 00                     asl     0,x                     ; Shift up one nybble
  1073 00:04DC: 3E 01 00                     rol     1,x
  1074 00:04DF: 1E 00 00                     asl     0,x
  1075 00:04E2: 3E 01 00                     rol     1,x
  1076 00:04E5: 1E 00 00                     asl     0,x
  1077 00:04E8: 3E 01 00                     rol     1,x
  1078 00:04EB: 1E 00 00                     asl     0,x
  1079 00:04EE: 3E 01 00                     rol     1,x
  1080                        
  Mon Jun 18 2018 21:48                                                                                                    Page 22


  1081 00:04F1: 1D 00 00                     ora     0,x                     ; Merge in new digit
  1082 00:04F4: 9D 00 00                     sta     0,x                     ; .. and save
  1083 00:04F7: 60                           rts
  1084                        
  1085                        ;===============================================================================
  1086                        ; Command Line Parsing and Building
  1087                        ;-------------------------------------------------------------------------------
  1088                        
  1089                        ; Get the next character from the command buffer updating the position in X.
  1090                        ; Set the carry if the end of the buffer is reached.
  1091                        
  1092                        NextChar:
  1093 00:04F8: C4 21                        cpy     BUFLEN                  ; Any characters left?
  1094 00:04FA: 90 01                        bcc     $+3
  1095 00:04FC: 60                           rts
  1096 00:04FD: B9 00 02                     lda     BUFFER,y
  1097 00:0500: C8                           iny
  1098 00:0501: 4C xx xx                     jmp     ToUpperCase
  1099                        
  1100                        ; Skip over any spaces until a non-space character or the end of the string
  1101                        ; is reached.
  1102                        
  1103                        SkipSpaces:
  1104 00:0504: 20 xx xx                     jsr     NextChar                ; Fetch next character
  1105 00:0507: 90 01                        bcc     $+3                     ; Any left?
  1106 00:0509: 60                           rts                             ; No
  1107 00:050A: C9 20                        cmp     #' '                    ; Is it a space?
  1108 00:050C: F0 F6                        beq     SkipSpaces              ; Yes, try again
  1109 00:050E: 18                           clc
  1110 00:050F: 60                           rts                             ; Done
  1111                        
  1112                        ; Clear the buffer and the add the command character in A.
  1113                        
  1114                        StartCommand:
  1115 00:0510: 64 21                        stz     BUFLEN                  ; Clear the character count
  1116                        
  1117                        ; Append the character in A to the command being built updating the length.
  1118                        
  1119                        BuildCommand:
  1120 00:0512: A4 21                        ldy     BUFLEN
  1121 00:0514: E6 21                        inc     BUFLEN
  1122 00:0516: 99 00 02                     sta     BUFFER,y
  1123 00:0519: 60                           rts
  1124                        
  1125                        ; Convert the value in A into hex characters and append to the command buffer.
  1126                        
  1127                        BuildByte:
  1128 00:051A: 48                           pha                             ; Save the value
  1129 00:051B: 4A                           lsr     a                       ; Shift MS nybble down
  1130 00:051C: 4A                           lsr     a
  1131 00:051D: 4A                           lsr     a
  1132 00:051E: 4A                           lsr     a
  1133 00:051F: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1134 00:0522: 20 xx xx                     jsr     BuildCommand            ; .. and add to command
  1135 00:0525: 68                           pla                             ; Pull LS nybble
  1136 00:0526: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1137 00:0529: 4C xx xx                     jmp     BuildCommand            ; .. and add to command
  1138                        
  Mon Jun 18 2018 21:48                                                                                                    Page 23


  1139                        ;===============================================================================
  1140                        ; Character Classification
  1141                        ;-------------------------------------------------------------------------------
  1142                        
  1143                        ; If the character in MD_ACC is lower case then convert it to upper case.
  1144                        
  1145                        ToUpperCase:
  1146 00:052C: 20 xx xx                     jsr     IsLowerCase             ; Test the character
  1147 00:052F: 90 02                        bcc     $+4
  1148 00:0531: E9 20                        sbc     #32                     ; Convert lower case
  1149 00:0533: 18                           clc
  1150 00:0534: 60                           rts                             ; Done
  1151                        
  1152                        ; Determine if the character in MD_ACC is a lower case letter. Set the carry if it
  1153                        ; is, otherwise clear it.
  1154                        
  1155                                        longa   off
  1156                        IsLowerCase:
  1157 00:0535: C9 61                        cmp     #'a'                    ; Between a and z?
  1158 00:0537: 90 06                        bcc     ClearCarry
  1159 00:0539: C9 7B                        cmp     #'z'+1
  1160 00:053B: B0 02                        bcs     ClearCarry
  1161 00:053D: 38           SetCarry:       sec
  1162 00:053E: 60                           rts
  1163 00:053F: 18           ClearCarry:     clc
  1164 00:0540: 60                           rts
  1165                        
  1166                        ; Determine if the character in MD_ACC is a hex character. Set the carry if it is,
  1167                        ; otherwise clear it.
  1168                        
  1169                                        longa   off
  1170                        IsHexDigit:
  1171 00:0541: C9 30                        cmp     #'0'                    ; Between 0 and 9?
  1172 00:0543: 90 FA                        bcc     ClearCarry
  1173 00:0545: C9 3A                        cmp     #'9'+1
  1174 00:0547: 90 F4                        bcc     SetCarry
  1175 00:0549: C9 41                        cmp     #'A'                    ; Between MD_ACC and F?
  1176 00:054B: 90 F2                        bcc     ClearCarry
  1177 00:054D: C9 47                        cmp     #'F'+1
  1178 00:054F: 90 EC                        bcc     SetCarry
  1179 00:0551: 80 EC                        bra     ClearCarry
  1180                        
  1181                        ; Determine if the character in MD_ACC is a printable character. Set the carry if it
  1182                        ; is, otherwise clear it.
  1183                        
  1184                                        longa   off
  1185                        IsPrintable:
  1186 00:0553: C9 20                        cmp     #' '
  1187 00:0555: 90 E8                        bcc     ClearCarry
  1188 00:0557: C9 7F                        cmp     #DEL
  1189 00:0559: 90 E2                        bcc     SetCarry
  1190 00:055B: 80 E2                        bra     ClearCarry
  1191                        
  1192                        ;===============================================================================
  1193                        ; Display Utilities
  1194                        ;-------------------------------------------------------------------------------
  1195                        
  1196                        ; Display the value in MD_ACC as two hexadecimal digits.
  Mon Jun 18 2018 21:48                                                                                                    Page 24


  1197                        
  1198                        TxHex2:
  1199 00:055D: 48                           pha                             ; Save the original byte
  1200 00:055E: 4A                           lsr     a                       ; Shift down hi nybble
  1201 00:055F: 4A                           lsr     a
  1202 00:0560: 4A                           lsr     a
  1203 00:0561: 4A                           lsr     a
  1204 00:0562: 20 xx xx                     jsr     UartHex                 ; Display
  1205 00:0565: 68                           pla                             ; Recover data byte
  1206                        
  1207                        ; Display the LSB of the value in MD_ACC as a hexadecimal digit using decimal
  1208                        ; arithmetic to do the conversion.
  1209                        
  1210                        UartHex:
  1211 00:0566: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1212 00:0569: 4C xx xx                     jmp     UartTx                  ; And display
  1213                        
  1214                        ; Convert a LSB of the value in MD_ACC to a hexadecimal digit using decimal
  1215                        ; arithmetic.
  1216                        
  1217                        HexToAscii:
  1218 00:056C: 29 0F                        and     #$0f                    ; Strip out lo nybble
  1219 00:056E: F8                           sed                             ; Convert to ASCII
  1220 00:056F: 18                           clc
  1221 00:0570: 69 90                        adc     #$90
  1222 00:0572: 69 40                        adc     #$40
  1223 00:0574: D8                           cld
  1224 00:0575: 60                           rts                             ; Done
  1225                        
  1226                        ; Display the string of characters starting a the memory location pointed to by
  1227                        ; X (16-bits).
  1228                        
  1229                                        .longa  off
  1230                                        .longi  on
  1231                        TxStr:
  1232 00:0576: BD 00 00                     lda     0,x                     ; Fetch the next character
  1233 00:0579: D0 01                        bne     $+3                     ; Return it end of string
  1234 00:057B: 60                           rts
  1235 00:057C: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
  1236 00:057F: E8                           inx                             ; Bump the pointer
  1237 00:0580: 80 F4                        bra     TxStr                   ; And repeat
  1238                        
  1239                        ; Display a CR/LF control character sequence.
  1240                        
  1241                        TxCRLF:
  1242 00:0582: 20 xx xx                     jsr     TxCR                    ; Transmit a CR
  1243 00:0585: A9 0A                        lda     #LF                     ; Followed by a LF
  1244 00:0587: 4C xx xx                     jmp     UartTx
  1245                        
  1246                        TxCR:
  1247 00:058A: A9 0D                        lda     #CR                     ; Transmit a CR
  1248 00:058C: 4C xx xx                     jmp     UartTx
  1249                        
  1250                        TxSpace:
  1251 00:058F: A9 20                        lda     #' '                    ; Transmit a space
  1252 00:0591: 4C xx xx                     jmp     UartTx
  1253                        
  1254                        ;===============================================================================
  Mon Jun 18 2018 21:48                                                                                                    Page 25


  1255                        ;-------------------------------------------------------------------------------
  1256                        
  1257                        ;
  1258                        
  1259                                        longa   off
  1260                                        longi   off
  1261                        TxCodeBytes:
  1262 00:0594: A7 23                        lda     [ADDR_S]                ; Fetch the opcode
  1263 00:0596: 20 xx xx                     jsr     OpcodeSize              ; and work out its size
  1264 00:0599: AA                           tax
  1265 00:059A: A0 00                        ldy     #0                      ; Clear byte count
  1266                        CodeLoop:
  1267 00:059C: B7 23                        lda     [ADDR_S],Y              ; Fetch a byte of code
  1268 00:059E: 20 xx xx                     jsr     TxHex2
  1269 00:05A1: 20 xx xx                     jsr     TxSpace
  1270 00:05A4: C8                           iny
  1271 00:05A5: CA                           dex
  1272 00:05A6: D0 F4                        bne     CodeLoop
  1273                        PadLoop:
  1274 00:05A8: C0 04                        cpy     #4                      ; Need to pad out?
  1275 00:05AA: D0 01                        bne     $+3
  1276 00:05AC: 60                           rts
  1277 00:05AD: 20 xx xx                     jsr     TxSpace
  1278 00:05B0: 20 xx xx                     jsr     TxSpace
  1279 00:05B3: 20 xx xx                     jsr     TxSpace
  1280 00:05B6: C8                           iny
  1281 00:05B7: 80 EF                        bra     PadLoop
  1282                        
  1283                        ;
  1284                        
  1285                                        longa   off
  1286                                        longi   off
  1287                        TxSymbolic:
  1288 00:05B9: A7 23                        lda     [ADDR_S]                ; Fetch opcode
  1289 00:05BB: 48                           pha
  1290 00:05BC: 20 xx xx                     jsr     TxOpcode
  1291 00:05BF: 68                           pla
  1292 00:05C0: 20 xx xx                     jsr     TxOperand
  1293 00:05C3: 60                           rts
  1294                        
  1295                        ;
  1296                        
  1297                                        longa   off
  1298                                        longi   off
  1299                        TxOpcode:
  1300 00:05C4: 08                           php                             ; Save register sizes
  1301 00:05C5: AA                           tax                             ; Work out the mnemonic
  1302 00:05C6: BD xx xx                     lda     OPCODES,x
  1303 00:05C9: AA                           tax
  1304                                        long_a
+ 1304 00:05CA: C2 20                        rep     #M_FLAG
+ 1304                                        longa   on
  1305 00:05CC: BD xx xx                     lda     MNEMONICS,x
  1306                        
  1307 00:05CF: 48                           pha                             ; Save last character
  1308 00:05D0: 4A                           lsr     a                       ; Shift second down
  1309 00:05D1: 4A                           lsr     a
  1310 00:05D2: 4A                           lsr     a
  Mon Jun 18 2018 21:48                                                                                                    Page 26


  1311 00:05D3: 4A                           lsr     a
  1312 00:05D4: 4A                           lsr     a
  1313 00:05D5: 48                           pha                             ; Save it
  1314 00:05D6: 4A                           lsr     a                       ; Shift first down
  1315 00:05D7: 4A                           lsr     a
  1316 00:05D8: 4A                           lsr     a
  1317 00:05D9: 4A                           lsr     a
  1318 00:05DA: 4A                           lsr     a
  1319 00:05DB: 20 xx xx                     jsr     ExpandMnem              ; Print first
  1320 00:05DE: 68                           pla
  1321 00:05DF: 20 xx xx                     jsr     ExpandMnem              ; .. second
  1322 00:05E2: 68                           pla
  1323 00:05E3: 20 xx xx                     jsr     ExpandMnem              ; .. and third
  1324 00:05E6: 28                           plp
  1325 00:05E7: 20 xx xx                     jsr     TxSpace
  1326 00:05EA: 60                           rts
  1327                        
  1328                        ExpandMnem:
  1329 00:05EB: 18                           clc
  1330 00:05EC: 29 1F 00                     and     #$1f                    ; Expand letter code
  1331 00:05EF: 69 40 00                     adc     #'@'
  1332 00:05F2: 4C xx xx                     jmp     UartTx
  1333                        
  1334                        ;
  1335                        
  1336                                        longa   off
  1337                                        longi   off
  1338                        TxOperand:
  1339 00:05F5: AA                           tax                             ; Work out addressing mode
  1340 00:05F6: BD xx xx                     lda     MODES,x
  1341 00:05F9: AA                           tax
  1342 00:05FA: 7C xx xx                     jmp     (MODE_SHOW,x)
  1343                        
  1344                        MODE_SHOW:
  1345 00:05FD: xx xx                        dw      TxAbsolute              ; a
  1346 00:05FF: xx xx                        dw      TxAccumulator           ; A
  1347 00:0601: xx xx                        dw      TxAbsoluteX             ; a,x
  1348 00:0603: xx xx                        dw      TxAbsoluteY             ; a,y
  1349 00:0605: xx xx                        dw      TxLong                  ; al
  1350 00:0607: xx xx                        dw      TxLongX                 ; al,x
  1351 00:0609: xx xx                        dw      TxAbsoluteIndirect      ; (a)
  1352 00:060B: xx xx                        dw      TxAbsoluteXIndirect     ; (a,x)
  1353 00:060D: xx xx                        dw      TxDirect                ; d
  1354 00:060F: xx xx                        dw      TxStack                 ; d,s
  1355 00:0611: xx xx                        dw      TxDirectX               ; d,x
  1356 00:0613: xx xx                        dw      TxDirectY               ; d,y
  1357 00:0615: xx xx                        dw      TxDirectIndirect        ; (d)
  1358 00:0617: xx xx                        dw      TxDirectIndirectLong    ; [d]
  1359 00:0619: xx xx                        dw      TxStackIndirectY        ; (d,s),y
  1360 00:061B: xx xx                        dw      TxDirectXIndirect       ; (d,x)
  1361 00:061D: xx xx                        dw      TxDirectIndirectY       ; (d),y
  1362 00:061F: xx xx                        dw      TxDirectIndirectLongY   ; [d],y
  1363 00:0621: xx xx                        dw      TxImplied               ;
  1364 00:0623: xx xx                        dw      TxRelative              ; r
  1365 00:0625: xx xx                        dw      TxRelativeLong          ; rl
  1366 00:0627: xx xx                        dw      TxMove                  ; xyc
  1367 00:0629: xx xx                        dw      TxImmediateM            ; # (A & M)
  1368 00:062B: xx xx                        dw      TxImmediateByte         ; # (BRK/COP/WDM)
  Mon Jun 18 2018 21:48                                                                                                    Page 27


  1369 00:062D: xx xx                        dw      TxImmediateX            ; # (X or Y)
  1370                        
  1371                        
  1372                        TxAccumulator:
  1373 00:062F: A9 41                        lda     #'A'
  1374 00:0631: 4C xx xx                     jmp     UartTx
  1375                        
  1376                        TxImmediateM:
  1377 00:0634: A9 20                        lda     #M_FLAG
  1378 00:0636: 24 20                        bit     FLAGS
  1379 00:0638: F0 2E                        beq     TxImmediateWord
  1380 00:063A: 80 25                        bra     TxImmediateByte
  1381                        
  1382                        TxImmediateX:
  1383 00:063C: A9 10                        lda     #X_FLAG
  1384 00:063E: 24 20                        bit     FLAGS
  1385 00:0640: F0 26                        beq     TxImmediateWord
  1386 00:0642: 80 1D                        bra     TxImmediateByte
  1387                        
  1388                        TxImplied:
  1389 00:0644: 60                           rts
  1390                        
  1391                        TxMove:
  1392 00:0645: A9 24                        lda     #'$'
  1393 00:0647: 20 xx xx                     jsr     UartTx
  1394 00:064A: A0 01                        ldy     #1
  1395 00:064C: B7 23                        lda     [ADDR_S],Y
  1396 00:064E: 20 xx xx                     jsr     TxHex2
  1397 00:0651: A9 2C                        lda     #','
  1398 00:0653: 20 xx xx                     jsr     UartTx
  1399 00:0656: A9 24                        lda     #'$'
  1400 00:0658: 20 xx xx                     jsr     UartTx
  1401 00:065B: C8                           iny
  1402 00:065C: B7 23                        lda     [ADDR_S],Y
  1403 00:065E: 4C xx xx                     jmp     TxHex2
  1404                        
  1405                        TxImmediateByte:
  1406 00:0661: A9 23                        lda     #'#'
  1407 00:0663: 20 xx xx                     jsr     UartTx
  1408 00:0666: 80 14                        bra     TxDirect
  1409                        
  1410                        TxImmediateWord:
  1411 00:0668: A9 23                        lda     #'#'
  1412 00:066A: 20 xx xx                     jsr     UartTx
  1413 00:066D: 80 33                        bra     TxAbsolute
  1414                        
  1415                        TxStack:
  1416 00:066F: 20 xx xx                     jsr     TxDirect
  1417 00:0672: A9 2C                        lda     #','
  1418 00:0674: 20 xx xx                     jsr     UartTx
  1419 00:0677: A9 53                        lda     #'S'
  1420 00:0679: 4C xx xx                     jmp     UartTx
  1421                        
  1422                        TxDirect:
  1423 00:067C: A9 24                        lda     #'$'
  1424 00:067E: 20 xx xx                     jsr     UartTx
  1425 00:0681: A0 01                        ldy     #1
  1426 00:0683: B7 23                        lda     [ADDR_S],Y
  Mon Jun 18 2018 21:48                                                                                                    Page 28


  1427 00:0685: 4C xx xx                     jmp     TxHex2
  1428                        
  1429                        TxDirectX:
  1430 00:0688: 20 xx xx                     jsr     TxDirect
  1431 00:068B: A9 2C        TxX:            lda     #','
  1432 00:068D: 20 xx xx                     jsr     UartTx
  1433 00:0690: A9 58                        lda     #'X'
  1434 00:0692: 4C xx xx                     jmp     UartTx
  1435                        
  1436                        TxDirectY:
  1437 00:0695: 20 xx xx                     jsr     TxDirect
  1438 00:0698: A9 2C        TxY:            lda     #','
  1439 00:069A: 20 xx xx                     jsr     UartTx
  1440 00:069D: A9 59                        lda     #'Y'
  1441 00:069F: 4C xx xx                     jmp     UartTx
  1442                        
  1443                        TxAbsolute:
  1444 00:06A2: A9 24                        lda     #'$'
  1445 00:06A4: 20 xx xx                     jsr     UartTx
  1446 00:06A7: A0 02                        ldy     #2
  1447 00:06A9: B7 23                        lda     [ADDR_S],Y
  1448 00:06AB: 20 xx xx                     jsr     TxHex2
  1449 00:06AE: 88                           dey
  1450 00:06AF: B7 23                        lda     [ADDR_S],Y
  1451 00:06B1: 4C xx xx                     jmp     TxHex2
  1452                        
  1453                        TxAbsoluteX:
  1454 00:06B4: 20 xx xx                     jsr     TxAbsolute
  1455 00:06B7: 80 D2                        bra     TxX
  1456                        
  1457                        TxAbsoluteY:
  1458 00:06B9: 20 xx xx                     jsr     TxAbsolute
  1459 00:06BC: 80 DA                        bra     TxY
  1460                        
  1461                        TxLong:
  1462 00:06BE: A9 24                        lda     #'$'
  1463 00:06C0: 20 xx xx                     jsr     UartTx
  1464 00:06C3: A0 03                        ldy     #3
  1465 00:06C5: B7 23                        lda     [ADDR_S],Y
  1466 00:06C7: 20 xx xx                     jsr     TxHex2
  1467 00:06CA: A9 3A                        lda     #':'
  1468 00:06CC: 20 xx xx                     jsr     UartTx
  1469 00:06CF: 88                           dey
  1470 00:06D0: B7 23                        lda     [ADDR_S],Y
  1471 00:06D2: 20 xx xx                     jsr     TxHex2
  1472 00:06D5: 88                           dey
  1473 00:06D6: B7 23                        lda     [ADDR_S],Y
  1474 00:06D8: 4C xx xx                     jmp     TxHex2
  1475                        
  1476                        TxLongX:
  1477 00:06DB: 20 xx xx                     jsr     TxLong
  1478 00:06DE: 80 AB                        bra     TxX
  1479                        
  1480                        TxAbsoluteIndirect:
  1481 00:06E0: A9 28                        lda     #'('
  1482 00:06E2: 20 xx xx                     jsr     UartTx
  1483 00:06E5: 20 xx xx                     jsr     TxAbsolute
  1484 00:06E8: A9 29                        lda     #')'
  Mon Jun 18 2018 21:48                                                                                                    Page 29


  1485 00:06EA: 4C xx xx                     jmp     UartTx
  1486                        
  1487                        TxAbsoluteXIndirect:
  1488 00:06ED: A9 28                        lda     #'('
  1489 00:06EF: 20 xx xx                     jsr     UartTx
  1490 00:06F2: 20 xx xx                     jsr     TxAbsoluteX
  1491 00:06F5: A9 29                        lda     #')'
  1492 00:06F7: 4C xx xx                     jmp     UartTx
  1493                        
  1494                        TxDirectIndirect:
  1495 00:06FA: A9 28                        lda     #'('
  1496 00:06FC: 20 xx xx                     jsr     UartTx
  1497 00:06FF: 20 xx xx                     jsr     TxDirect
  1498 00:0702: A9 29                        lda     #')'
  1499 00:0704: 4C xx xx                     jmp     UartTx
  1500                        
  1501                        TxDirectXIndirect:
  1502 00:0707: A9 28                        lda     #'('
  1503 00:0709: 20 xx xx                     jsr     UartTx
  1504 00:070C: 20 xx xx                     jsr     TxDirectX
  1505 00:070F: A9 29                        lda     #')'
  1506 00:0711: 4C xx xx                     jmp     UartTx
  1507                        
  1508                        TxDirectIndirectY:
  1509 00:0714: A9 28                        lda     #'('
  1510 00:0716: 20 xx xx                     jsr     UartTx
  1511 00:0719: 20 xx xx                     jsr     TxDirect
  1512 00:071C: A9 29                        lda     #')'
  1513 00:071E: 20 xx xx                     jsr     UartTx
  1514 00:0721: 4C xx xx                     jmp     TxY
  1515                        
  1516                        TxDirectIndirectLong:
  1517 00:0724: A9 5B                        lda     #'['
  1518 00:0726: 20 xx xx                     jsr     UartTx
  1519 00:0729: 20 xx xx                     jsr     TxDirect
  1520 00:072C: A9 5D                        lda     #']'
  1521 00:072E: 4C xx xx                     jmp     UartTx
  1522                        
  1523                        TxDirectIndirectLongY:
  1524 00:0731: 20 xx xx                     jsr     TxDirectIndirectLong
  1525 00:0734: 4C xx xx                     jmp     TxY
  1526                        
  1527                        TxStackIndirectY:
  1528 00:0737: A9 28                        lda     #'('
  1529 00:0739: 20 xx xx                     jsr     UartTx
  1530 00:073C: 20 xx xx                     jsr     TxStack
  1531 00:073F: A9 29                        lda     #')'
  1532 00:0741: 20 xx xx                     jsr     UartTx
  1533 00:0744: 4C xx xx                     jmp     TxY
  1534                        
  1535                        TxRelative:
  1536 00:0747: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1537 00:0749: A5 23                        lda     ADDR_S+0
  1538 00:074B: 18                           clc
  1539 00:074C: 69 02                        adc     #2
  1540 00:074E: 90 01                        bcc     $+3
  1541 00:0750: E8                           inx
  1542                        
  Mon Jun 18 2018 21:48                                                                                                    Page 30


  1543 00:0751: 48                           pha                             ; Add relative offset
  1544 00:0752: A0 01                        ldy     #1
  1545 00:0754: B7 23                        lda     [ADDR_S],y
  1546 00:0756: 10 01                        bpl     $+3
  1547 00:0758: CA                           dex
  1548 00:0759: 18                           clc
  1549 00:075A: 63 01                        adc     1,s
  1550 00:075C: 83 01                        sta     1,s
  1551 00:075E: 90 01                        bcc     $+3
  1552 00:0760: E8                           inx
  1553 00:0761: 80 15                        bra     TxAddr
  1554                        
  1555                        TxRelativeLong:
  1556 00:0763: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1557 00:0765: A5 23                        lda     ADDR_S+0
  1558 00:0767: 18                           clc
  1559 00:0768: 69 03                        adc     #3
  1560 00:076A: 90 01                        bcc     $+3
  1561 00:076C: E8                           inx
  1562                        
  1563 00:076D: 18                           clc                             ; Add relative offset
  1564 00:076E: A0 01                        ldy     #1
  1565 00:0770: 77 23                        adc     [ADDR_S],y
  1566 00:0772: 48                           pha
  1567 00:0773: C8                           iny
  1568 00:0774: 8A                           txa
  1569 00:0775: 77 23                        adc     [ADDR_S],Y
  1570 00:0777: AA                           tax
  1571                        
  1572                        TxAddr:
  1573 00:0778: A9 24                        lda     #'$'                    ; Print address
  1574 00:077A: 20 xx xx                     jsr     UartTx
  1575 00:077D: 8A                           txa
  1576 00:077E: 20 xx xx                     jsr     TxHex2
  1577 00:0781: 68                           pla
  1578 00:0782: 4C xx xx                     jmp     TxHex2
  1579                        
  1580                        ;  Returns the size of the opcode in A given the current flag settings.
  1581                        
  1582                                        longa   off
  1583                                        longi   off
  1584                        OpcodeSize:
  1585 00:0785: AA                           tax                             ; Work out addressing mode
  1586 00:0786: BD xx xx                     lda     MODES,x
  1587 00:0789: AA                           tax
  1588 00:078A: 7C xx xx                     jmp     (MODE_SIZE,x)
  1589                        
  1590                        MODE_SIZE:
  1591 00:078D: xx xx                        dw      Size3                   ; a
  1592 00:078F: xx xx                        dw      Size1                   ; A
  1593 00:0791: xx xx                        dw      Size3                   ; a,x
  1594 00:0793: xx xx                        dw      Size3                   ; a,y
  1595 00:0795: xx xx                        dw      Size4                   ; al
  1596 00:0797: xx xx                        dw      Size4                   ; al,x
  1597 00:0799: xx xx                        dw      Size3                   ; (a)
  1598 00:079B: xx xx                        dw      Size3                   ; (a,x)
  1599 00:079D: xx xx                        dw      Size2                   ; d
  1600 00:079F: xx xx                        dw      Size2                   ; d,s
  Mon Jun 18 2018 21:48                                                                                                    Page 31


  1601 00:07A1: xx xx                        dw      Size2                   ; d,x
  1602 00:07A3: xx xx                        dw      Size2                   ; d,y
  1603 00:07A5: xx xx                        dw      Size2                   ; (d)
  1604 00:07A7: xx xx                        dw      Size2                   ; [d]
  1605 00:07A9: xx xx                        dw      Size2                   ; (d,s),y
  1606 00:07AB: xx xx                        dw      Size2                   ; (d,x)
  1607 00:07AD: xx xx                        dw      Size2                   ; (d),y
  1608 00:07AF: xx xx                        dw      Size2                   ; [d],y
  1609 00:07B1: xx xx                        dw      Size1                   ;
  1610 00:07B3: xx xx                        dw      Size2                   ; r
  1611 00:07B5: xx xx                        dw      Size3                   ; rl
  1612 00:07B7: xx xx                        dw      Size3                   ; xyc
  1613 00:07B9: xx xx                        dw      TestM                   ; # (A & M)
  1614 00:07BB: xx xx                        dw      Size2                   ; # (BRK/COP/WDM)
  1615 00:07BD: xx xx                        dw      TestX                   ; # (X or Y)
  1616                        
  1617                        TestM
  1618 00:07BF: A9 20                        lda     #M_FLAG                 ; Is M bit set?
  1619 00:07C1: 25 20                        and     FLAGS
  1620 00:07C3: F0 10                        beq     Size3                   ; No, word
  1621 00:07C5: 80 0B                        bra     Size2                   ; else byte
  1622                        
  1623                        TestX
  1624 00:07C7: A9 10                        lda     #X_FLAG                 ; Is X bit set?
  1625 00:07C9: 25 20                        and     FLAGS
  1626 00:07CB: F0 08                        beq     Size3                   ; No, word
  1627 00:07CD: 80 03                        bra     Size2                   ; else byte
  1628                        
  1629 00:07CF: A9 01        Size1:          lda     #1
  1630 00:07D1: 60                           rts
  1631 00:07D2: A9 02        Size2:          lda     #2
  1632 00:07D4: 60                           rts
  1633 00:07D5: A9 03        Size3           lda     #3
  1634 00:07D7: 60                           rts
  1635 00:07D8: A9 04        Size4:          lda     #4
  1636 00:07DA: 60                           rts
  1637                        
  1638                        OPCODES:
  1639 00:07DB: 16 52 28 52                  db      OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00
  1640 00:07DF: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1641 00:07E3: 62 52 04 5E                  db      OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1642 00:07E7: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1643 00:07EB: 12 52 52 52                  db      OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
  1644 00:07EF: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1645 00:07F3: 1E 52 36 9A                  db      OP_CLC,OP_ORA,OP_INC,OP_TCS
  1646 00:07F7: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1647 00:07FB: 42 02 40 02                  db      OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
  1648 00:07FF: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1649 00:0803: 6E 02 76 6C                  db      OP_PLP,OP_AND,OP_ROL,OP_PLD
  1650 00:0807: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1651 00:080B: 0E 02 02 02                  db      OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
  1652 00:080F: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1653 00:0813: 82 02 2E A2                  db      OP_SEC,OP_AND,OP_DEC,OP_TSC
  1654 00:0817: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1655 00:081B: 7A 34 B2 34                  db      OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
  1656 00:081F: 4E 34 4A 34                  db      OP_MVP,OP_EOR,OP_LSR,OP_EOR
  1657 00:0823: 5A 34 4A 60                  db      OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1658 00:0827: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  Mon Jun 18 2018 21:48                                                                                                    Page 32


  1659 00:082B: 1A 34 34 34                  db      OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
  1660 00:082F: 4C 34 4A 34                  db      OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1661 00:0833: 22 34 66 98                  db      OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1662 00:0837: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1663 00:083B: 7E 00 58 00                  db      OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
  1664 00:083F: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1665 00:0843: 68 00 78 7C                  db      OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1666 00:0847: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1667 00:084B: 1C 00 00 00                  db      OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
  1668 00:084F: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1669 00:0853: 86 00 72 9C                  db      OP_SEI,OP_ADC,OP_PLY,OP_TDC
  1670 00:0857: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1671 00:085B: 14 8A 18 8A                  db      OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
  1672 00:085F: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1673 00:0863: 32 0C A6 5C                  db      OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1674 00:0867: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1675 00:086B: 06 8A 8A 8A                  db      OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
  1676 00:086F: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1677 00:0873: AC 8A A8 AA                  db      OP_TYA,OP_STA,OP_TXS,OP_TXY
  1678 00:0877: 92 8A 92 8A                  db      OP_STZ,OP_STA,OP_STZ,OP_STA
  1679 00:087B: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
  1680 00:087F: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1681 00:0883: 96 44 94 6A                  db      OP_TAY,OP_LDA,OP_TAX,OP_PLB
  1682 00:0887: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1683 00:088B: 08 44 44 44                  db      OP_BCS,OP_LDA,OP_LDA,OP_LDA     ; B0
  1684 00:088F: 44 48 46 44                  db      OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1685 00:0893: 24 44 A4 AE                  db      OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1686 00:0897: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1687 00:089B: 2C 26 74 26                  db      OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
  1688 00:089F: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1689 00:08A3: 3A 26 30 B0                  db      OP_INY,OP_CMP,OP_DEX,OP_WAI
  1690 00:08A7: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1691 00:08AB: 10 26 26 26                  db      OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
  1692 00:08AF: 56 26 2E 26                  db      OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1693 00:08B3: 20 26 64 8C                  db      OP_CLD,OP_CMP,OP_PHX,OP_STP
  1694 00:08B7: 3C 26 2E 26                  db      OP_JML,OP_CMP,OP_DEC,OP_CMP
  1695 00:08BB: 2A 80 88 80                  db      OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
  1696 00:08BF: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1697 00:08C3: 38 80 50 B4                  db      OP_INX,OP_SBC,OP_NOP,OP_XBA
  1698 00:08C7: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1699 00:08CB: 0A 80 80 80                  db      OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
  1700 00:08CF: 54 80 36 80                  db      OP_PEA,OP_SBC,OP_INC,OP_SBC
  1701 00:08D3: 84 80 70 B6                  db      OP_SED,OP_SBC,OP_PLX,OP_XCE
  1702 00:08D7: 42 80 36 80                  db      OP_JSR,OP_SBC,OP_INC,OP_SBC
  1703                        
  1704                        MODES:
  1705 00:08DB: 2E 1E 2E 12                  db      MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
  1706 00:08DF: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1707 00:08E3: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1708 00:08E7: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1709 00:08EB: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
  1710 00:08EF: 10 14 14 22                  db      MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1711 00:08F3: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1712 00:08F7: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1713 00:08FB: 00 1E 08 12                  db      MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
  1714 00:08FF: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1715 00:0903: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1716 00:0907: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  Mon Jun 18 2018 21:48                                                                                                    Page 33


  1717 00:090B: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
  1718 00:090F: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1719 00:0913: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1720 00:0917: 04 04 04 0A                  db      MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1721 00:091B: 24 1E 2E 12                  db      MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
  1722 00:091F: 2A 10 10 1A                  db      MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1723 00:0923: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1724 00:0927: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1725 00:092B: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
  1726 00:092F: 2A 14 14 22                  db      MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1727 00:0933: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1728 00:0937: 08 04 04 0A                  db      MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1729 00:093B: 24 1E 24 12                  db      MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
  1730 00:093F: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1731 00:0943: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1732 00:0947: 0C 00 00 08                  db      MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1733 00:094B: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
  1734 00:094F: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1735 00:0953: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1736 00:0957: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1737 00:095B: 26 1E 28 12                  db      MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
  1738 00:095F: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1739 00:0963: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1740 00:0967: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1741 00:096B: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
  1742 00:096F: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1743 00:0973: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1744 00:0977: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1745 00:097B: 30 1E 30 12                  db      MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
  1746 00:097F: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1747 00:0983: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1748 00:0987: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1749 00:098B: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
  1750 00:098F: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1751 00:0993: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1752 00:0997: 04 04 06 0A                  db      MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1753 00:099B: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
  1754 00:099F: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1755 00:09A3: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1756 00:09A7: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1757 00:09AB: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
  1758 00:09AF: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1759 00:09B3: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1760 00:09B7: 0C 04 04 0A                  db      MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1761 00:09BB: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
  1762 00:09BF: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1763 00:09C3: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1764 00:09C7: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1765 00:09CB: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
  1766 00:09CF: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1767 00:09D3: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1768 00:09D7: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1769                        
  1770                        MNEMONICS:
  1771                                        MNEM    'A','D','C'
+ 1771 00:09DB: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1772                                        MNEM    'A','N','D'
+ 1772 00:09DD: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  Mon Jun 18 2018 21:48                                                                                                    Page 34


  1773                                        MNEM    'A','S','L'
+ 1773 00:09DF: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1774                                        MNEM    'B','C','C'
+ 1774 00:09E1: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1775                                        MNEM    'B','C','S'
+ 1775 00:09E3: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1776                                        MNEM    'B','E','Q'
+ 1776 00:09E5: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1777                                        MNEM    'B','I','T'
+ 1777 00:09E7: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1778                                        MNEM    'B','M','I'
+ 1778 00:09E9: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1779                                        MNEM    'B','N','E'
+ 1779 00:09EB: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1780                                        MNEM    'B','P','L'
+ 1780 00:09ED: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1781                                        MNEM    'B','R','A'
+ 1781 00:09EF: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1782                                        MNEM    'B','R','K'
+ 1782 00:09F1: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1783                                        MNEM    'B','R','L'
+ 1783 00:09F3: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1784                                        MNEM    'B','V','C'
+ 1784 00:09F5: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1785                                        MNEM    'B','V','S'
+ 1785 00:09F7: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1786                                        MNEM    'C','L','C'
+ 1786 00:09F9: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1787                                        MNEM    'C','L','D'
+ 1787 00:09FB: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1788                                        MNEM    'C','L','I'
+ 1788 00:09FD: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1789                                        MNEM    'C','L','V'
+ 1789 00:09FF: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1790                                        MNEM    'C','M','P'
+ 1790 00:0A01: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1791                                        MNEM    'C','O','P'
+ 1791 00:0A03: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1792                                        MNEM    'C','P','X'
+ 1792 00:0A05: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1793                                        MNEM    'C','P','Y'
+ 1793 00:0A07: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1794                                        MNEM    'D','E','C'
+ 1794 00:0A09: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1795                                        MNEM    'D','E','X'
+ 1795 00:0A0B: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1796                                        MNEM    'D','E','Y'
+ 1796 00:0A0D: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  1797                                        MNEM    'E','O','R'
+ 1797 00:0A0F: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1798                                        MNEM    'I','N','C'
+ 1798 00:0A11: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1799                                        MNEM    'I','N','X'
+ 1799 00:0A13: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1800                                        MNEM    'I','N','Y'
+ 1800 00:0A15: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  1801                                        MNEM    'J','M','L'
+ 1801 00:0A17: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  Mon Jun 18 2018 21:48                                                                                                    Page 35


  1802                                        MNEM    'J','M','P'
+ 1802 00:0A19: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1803                                        MNEM    'J','S','L'
+ 1803 00:0A1B: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1804                                        MNEM    'J','S','R'
+ 1804 00:0A1D: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1805                                        MNEM    'L','D','A'
+ 1805 00:0A1F: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1806                                        MNEM    'L','D','X'
+ 1806 00:0A21: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1807                                        MNEM    'L','D','Y'
+ 1807 00:0A23: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1808                                        MNEM    'L','S','R'
+ 1808 00:0A25: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1809                                        MNEM    'M','V','N'
+ 1809 00:0A27: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1810                                        MNEM    'M','V','P'
+ 1810 00:0A29: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1811                                        MNEM    'N','O','P'
+ 1811 00:0A2B: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1812                                        MNEM    'O','R','A'
+ 1812 00:0A2D: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1813                                        MNEM    'P','E','A'
+ 1813 00:0A2F: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1814                                        MNEM    'P','E','I'
+ 1814 00:0A31: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1815                                        MNEM    'P','E','R'
+ 1815 00:0A33: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1816                                        MNEM    'P','H','A'
+ 1816 00:0A35: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1817                                        MNEM    'P','H','B'
+ 1817 00:0A37: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1818                                        MNEM    'P','H','D'
+ 1818 00:0A39: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1819                                        MNEM    'P','H','K'
+ 1819 00:0A3B: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1820                                        MNEM    'P','H','P'
+ 1820 00:0A3D: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1821                                        MNEM    'P','H','X'
+ 1821 00:0A3F: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1822                                        MNEM    'P','H','Y'
+ 1822 00:0A41: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1823                                        MNEM    'P','L','A'
+ 1823 00:0A43: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1824                                        MNEM    'P','L','B'
+ 1824 00:0A45: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1825                                        MNEM    'P','L','D'
+ 1825 00:0A47: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1826                                        MNEM    'P','L','P'
+ 1826 00:0A49: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1827                                        MNEM    'P','L','X'
+ 1827 00:0A4B: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1828                                        MNEM    'P','L','Y'
+ 1828 00:0A4D: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1829                                        MNEM    'R','E','P'
+ 1829 00:0A4F: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1830                                        MNEM    'R','O','L'
+ 1830 00:0A51: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  Mon Jun 18 2018 21:48                                                                                                    Page 36


  1831                                        MNEM    'R','O','R'
+ 1831 00:0A53: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1832                                        MNEM    'R','T','I'
+ 1832 00:0A55: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1833                                        MNEM    'R','T','L'
+ 1833 00:0A57: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1834                                        MNEM    'R','T','S'
+ 1834 00:0A59: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1835                                        MNEM    'S','B','C'
+ 1835 00:0A5B: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1836                                        MNEM    'S','E','C'
+ 1836 00:0A5D: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1837                                        MNEM    'S','E','D'
+ 1837 00:0A5F: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1838                                        MNEM    'S','E','I'
+ 1838 00:0A61: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1839                                        MNEM    'S','E','P'
+ 1839 00:0A63: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1840                                        MNEM    'S','T','A'
+ 1840 00:0A65: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1841                                        MNEM    'S','T','P'
+ 1841 00:0A67: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1842                                        MNEM    'S','T','X'
+ 1842 00:0A69: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1843                                        MNEM    'S','T','Y'
+ 1843 00:0A6B: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1844                                        MNEM    'S','T','Z'
+ 1844 00:0A6D: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1845                                        MNEM    'T','A','X'
+ 1845 00:0A6F: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1846                                        MNEM    'T','A','Y'
+ 1846 00:0A71: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1847                                        MNEM    'T','C','D'
+ 1847 00:0A73: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1848                                        MNEM    'T','C','S'
+ 1848 00:0A75: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1849                                        MNEM    'T','D','C'
+ 1849 00:0A77: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1850                                        MNEM    'T','R','B'
+ 1850 00:0A79: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1851                                        MNEM    'T','S','B'
+ 1851 00:0A7B: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1852                                        MNEM    'T','S','C'
+ 1852 00:0A7D: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1853                                        MNEM    'T','S','X'
+ 1853 00:0A7F: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1854                                        MNEM    'T','X','A'
+ 1854 00:0A81: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  1855                                        MNEM    'T','X','S'
+ 1855 00:0A83: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1856                                        MNEM    'T','X','Y'
+ 1856 00:0A85: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1857                                        MNEM    'T','Y','A'
+ 1857 00:0A87: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1858                                        MNEM    'T','Y','X'
+ 1858 00:0A89: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  1859                                        MNEM    'W','A','I'
+ 1859 00:0A8B: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  Mon Jun 18 2018 21:48                                                                                                    Page 37


  1860                                        MNEM    'W','D','M'
+ 1860 00:0A8D: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1861                                        MNEM    'X','B','A'
+ 1861 00:0A8F: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1862                                        MNEM    'X','C','E'
+ 1862 00:0A91: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1863                        
  1864                        ;===============================================================================
  1865                        ; String Literals
  1866                        ;-------------------------------------------------------------------------------
  1867                        
  1868 00:0A93: 0D 0A        TITLE           db      CR,LF
  1869                                        ifdef   W65C816SXB
  1870 00:0A95: 57 36 35 43                  db      "W65C816SXB"
       00:0A99: 38 31 36 53 
       00:0A9D: 58 42 
  1871                                        endif
  1872                                        ifdef   W65C265SXB
  1873                                        db      "W65C265SXB"
  1874                                        endif
  1875 00:0A9F: 2D 48 61 63                  db      "-Hacker [18.06]",0
       00:0AA3: 6B 65 72 20 
       00:0AA7: 5B 31 38 2E 
       00:0AAB: 30 36 5D 00 
  1876                        
  1877 00:0AAF: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:0AB3: 72 6F 72 20 
       00:0AB7: 2D 20 54 79 
       00:0ABB: 70 65 20 3F 
       00:0ABF: 20 66 6F 72 
       00:0AC3: 20 68 65 6C 
       00:0AC7: 70 00 
  1878                        
  1879 00:0AC9: 0D 0A 45 72  ERASE_FAILED    db      CR,LF,"Erase failed",0
       00:0ACD: 61 73 65 20 
       00:0AD1: 66 61 69 6C 
       00:0AD5: 65 64 00 
  1880 00:0AD8: 0D 0A 57 72  WRITE_FAILED    db      CR,LF,"Write failed",0
       00:0ADC: 69 74 65 20 
       00:0AE0: 66 61 69 6C 
       00:0AE4: 65 64 00 
  1881 00:0AE7: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:0AEB: 43 20 52 4F 
       00:0AEF: 4D 20 42 61 
       00:0AF3: 6E 6B 20 53 
       00:0AF7: 65 6C 65 63 
       00:0AFB: 74 65 64 00 
  1882 00:0AFF: 0D 0A 49 6E  INVALID_S19     db      CR,LF,"Invalid S19 record",0
       00:0B03: 76 61 6C 69 
       00:0B07: 64 20 53 31 
       00:0B0B: 39 20 72 65 
       00:0B0F: 63 6F 72 64 
       00:0B13: 00 
  1883                        
  1884 00:0B14: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
       00:0B18: 69 74 69 6E 
       00:0B1C: 67 20 66 6F 
       00:0B20: 72 20 58 4D 
  Mon Jun 18 2018 21:48                                                                                                    Page 38


       00:0B24: 4F 44 45 4D 
       00:0B28: 20 74 72 61 
       00:0B2C: 6E 73 66 65 
       00:0B30: 72 20 74 6F 
       00:0B34: 20 73 74 61 
       00:0B38: 72 74 00 
  1885 00:0B3B: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:0B3F: 6D 65 6F 75 
       00:0B43: 74 00 
  1886                        
  1887 00:0B45: 0D 0A 42 20  HELP            db      CR,LF,"B bb           - Set memory bank"
       00:0B49: 62 62 20 20 
       00:0B4D: 20 20 20 20 
       00:0B51: 20 20 20 20 
       00:0B55: 20 2D 20 53 
       00:0B59: 65 74 20 6D 
       00:0B5D: 65 6D 6F 72 
       00:0B61: 79 20 62 61 
       00:0B65: 6E 6B 
  1888 00:0B67: 0D 0A 44 20                  db      CR,LF,"D ssss eeee    - Disassemble memory in current bank"
       00:0B6B: 73 73 73 73 
       00:0B6F: 20 65 65 65 
       00:0B73: 65 20 20 20 
       00:0B77: 20 2D 20 44 
       00:0B7B: 69 73 61 73 
       00:0B7F: 73 65 6D 62 
       00:0B83: 6C 65 20 6D 
       00:0B87: 65 6D 6F 72 
       00:0B8B: 79 20 69 6E 
       00:0B8F: 20 63 75 72 
       00:0B93: 72 65 6E 74 
       00:0B97: 20 62 61 6E 
       00:0B9B: 6B 
  1889 00:0B9C: 0D 0A 45 20                  db      CR,LF,"E              - Erase ROM area"
       00:0BA0: 20 20 20 20 
       00:0BA4: 20 20 20 20 
       00:0BA8: 20 20 20 20 
       00:0BAC: 20 2D 20 45 
       00:0BB0: 72 61 73 65 
       00:0BB4: 20 52 4F 4D 
       00:0BB8: 20 61 72 65 
       00:0BBC: 61 
  1890                                        ifdef   W65C265SXB
  1891                                        db      CR,LF,"F 0-1          - Disable/Enable WDC ROM"
  1892                                        db      CR,LF,"H              - Hunt for RAM"
  1893                                        endif
  1894 00:0BBD: 0D 0A 47 20                  db      CR,LF,"G [xxxx]       - Run from bb:xxxx or invoke reset vector"
       00:0BC1: 5B 78 78 78 
       00:0BC5: 78 5D 20 20 
       00:0BC9: 20 20 20 20 
       00:0BCD: 20 2D 20 52 
       00:0BD1: 75 6E 20 66 
       00:0BD5: 72 6F 6D 20 
       00:0BD9: 62 62 3A 78 
       00:0BDD: 78 78 78 20 
       00:0BE1: 6F 72 20 69 
       00:0BE5: 6E 76 6F 6B 
       00:0BE9: 65 20 72 65 
  Mon Jun 18 2018 21:48                                                                                                    Page 39


       00:0BED: 73 65 74 20 
       00:0BF1: 76 65 63 74 
       00:0BF5: 6F 72 
  1895 00:0BF7: 0D 0A 4D 20                  db      CR,LF,"M ssss eeee    - Display memory in current bank"
       00:0BFB: 73 73 73 73 
       00:0BFF: 20 65 65 65 
       00:0C03: 65 20 20 20 
       00:0C07: 20 2D 20 44 
       00:0C0B: 69 73 70 6C 
       00:0C0F: 61 79 20 6D 
       00:0C13: 65 6D 6F 72 
       00:0C17: 79 20 69 6E 
       00:0C1B: 20 63 75 72 
       00:0C1F: 72 65 6E 74 
       00:0C23: 20 62 61 6E 
       00:0C27: 6B 
  1896 00:0C28: 0D 0A 52 20                  db      CR,LF,"R 0-3          - Select ROM bank 0-3"
       00:0C2C: 30 2D 33 20 
       00:0C30: 20 20 20 20 
       00:0C34: 20 20 20 20 
       00:0C38: 20 2D 20 53 
       00:0C3C: 65 6C 65 63 
       00:0C40: 74 20 52 4F 
       00:0C44: 4D 20 62 61 
       00:0C48: 6E 6B 20 30 
       00:0C4C: 2D 33 
  1897 00:0C4E: 0D 0A 53 2E                  db      CR,LF,"S...           - Process S19 record"
       00:0C52: 2E 2E 20 20 
       00:0C56: 20 20 20 20 
       00:0C5A: 20 20 20 20 
       00:0C5E: 20 2D 20 50 
       00:0C62: 72 6F 63 65 
       00:0C66: 73 73 20 53 
       00:0C6A: 31 39 20 72 
       00:0C6E: 65 63 6F 72 
       00:0C72: 64 
  1898 00:0C73: 0D 0A 57 20                  db      CR,LF,"W xxxx yy      - Set memory at xxxx to yy"
       00:0C77: 78 78 78 78 
       00:0C7B: 20 79 79 20 
       00:0C7F: 20 20 20 20 
       00:0C83: 20 2D 20 53 
       00:0C87: 65 74 20 6D 
       00:0C8B: 65 6D 6F 72 
       00:0C8F: 79 20 61 74 
       00:0C93: 20 78 78 78 
       00:0C97: 78 20 74 6F 
       00:0C9B: 20 79 79 
  1899 00:0C9E: 0D 0A 58 20                  db      CR,LF,"X xxxx         - XMODEM receive to bb:xxxx"
       00:0CA2: 78 78 78 78 
       00:0CA6: 20 20 20 20 
       00:0CAA: 20 20 20 20 
       00:0CAE: 20 2D 20 58 
       00:0CB2: 4D 4F 44 45 
       00:0CB6: 4D 20 72 65 
       00:0CBA: 63 65 69 76 
       00:0CBE: 65 20 74 6F 
       00:0CC2: 20 62 62 3A 
       00:0CC6: 78 78 78 78 
  Mon Jun 18 2018 21:48                                                                                                    Page 40


  1900 00:0CCA: 00                           db      0
  1901                        
  1902                                        end


      Lines assembled: 2128
      Errors: 0