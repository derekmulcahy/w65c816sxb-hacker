ca65 V2.19 - Git d36800591
Main file   : w65c816sxb.asm
Current file: w65c816sxb.asm

000000r 1               ;===============================================================================
000000r 1               ; __        ____  ____   ____ ___  _  __  ______  ______
000000r 1               ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
000000r 1               ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
000000r 1               ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
000000r 1               ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
000000r 1               ;
000000r 1               ; Basic Vector Handling for the W65C816SXB Development Board
000000r 1               ;-------------------------------------------------------------------------------
000000r 1               ; Copyright (C)2015 HandCoded Software Ltd.
000000r 1               ; All rights reserved.
000000r 1               ;
000000r 1               ; CC65 conversion by Derek Mulcahy.
000000r 1               ;
000000r 1               ; This work is made available under the terms of the Creative Commons
000000r 1               ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
000000r 1               ; following URL to see the details.
000000r 1               ;
000000r 1               ; http://creativecommons.org/licenses/by-nc-sa/4.0/
000000r 1               ;
000000r 1               ;===============================================================================
000000r 1               ; Notes:
000000r 1               ;
000000r 1               ; Timer2 in the VIA2 is used to time the ACIA transmissions and determine when
000000r 1               ; the device is capable of sending another character.
000000r 1               ;
000000r 1               ;-------------------------------------------------------------------------------
000000r 1               
000000r 1                               .list on
000000r 1                               .p816
000000r 1               
000000r 1                               .include "w65c816.inc"
000000r 2               ;==============================================================================
000000r 2               ; __        ____  ____   ____ ___  _  __
000000r 2               ; \ \      / / /_| ___| / ___( _ )/ |/ /_
000000r 2               ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \
000000r 2               ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
000000r 2               ;    \_/\_/  \___/____/ \____\___/|_|\___/
000000r 2               ;
000000r 2               ; Western Design Center W65C816 device definitions
000000r 2               ;------------------------------------------------------------------------------
000000r 2               ; Copyright (C)2015 HandCoded Software Ltd.
000000r 2               ; All rights reserved.
000000r 2               ;
000000r 2               ; This work is made available under the terms of the Creative Commons
000000r 2               ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
000000r 2               ; following URL to see the details.
000000r 2               ;
000000r 2               ; http://creativecommons.org/licenses/by-nc-sa/4.0/
000000r 2               ;
000000r 2               ;===============================================================================
000000r 2               ; Notes:
000000r 2               ;
000000r 2               ; Various macros and definitions for the W65C816 microprocessor.
000000r 2               ;
000000r 2               ;===============================================================================
000000r 2               ; Revision History:
000000r 2               ;
000000r 2               ; 2015-12-18 AJ Initial version
000000r 2               ;-------------------------------------------------------------------------------
000000r 2               ; $Id$
000000r 2               ;-------------------------------------------------------------------------------
000000r 2               
000000r 2               ;==============================================================================
000000r 2               ; Status Register Bits
000000r 2               ;------------------------------------------------------------------------------
000000r 2               
000000r 2               N_FLAG          =     1<<7
000000r 2               V_FLAG          =     1<<6
000000r 2               M_FLAG          =     1<<5
000000r 2               X_FLAG          =     1<<4
000000r 2               B_FLAG          =     1<<4
000000r 2               D_FLAG          =     1<<3
000000r 2               I_FLAG          =     1<<2
000000r 2               Z_FLAG          =     1<<1
000000r 2               C_FLAG          =     1<<0
000000r 2               
000000r 2               ;==============================================================================
000000r 2               ; Macros
000000r 2               ;------------------------------------------------------------------------------
000000r 2               
000000r 2               ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
000000r 2               ; is fixed at $0100-$01ff.
000000r 2               
000000r 2               .macro          emulate
000000r 2                               sec
000000r 2                               xce
000000r 2               .endmacro
000000r 2               
000000r 2               ; Puts the processor in native mode. The size of the memory and index register
000000r 2               ; operations is not controlled by the M & X bits in the status register.
000000r 2               
000000r 2               .macro          native
000000r 2                               clc
000000r 2                               xce
000000r 2               .endmacro
000000r 2               
000000r 2               ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
000000r 2               
000000r 2               .macro          long_a
000000r 2                               rep     #M_FLAG
000000r 2                               .a16
000000r 2               .endmacro
000000r 2               
000000r 2               ; Resets the X bit making the index registers 16-bits wide
000000r 2               
000000r 2               .macro          long_i
000000r 2                               rep     #X_FLAG
000000r 2                               .i16
000000r 2               .endmacro
000000r 2               
000000r 2               ; Resets the M and X bits making the accumulator, memory accesses and index
000000r 2               ; registers 16-bits wide.
000000r 2               
000000r 2               .macro          long_ai
000000r 2                               rep     #M_FLAG|X_FLAG
000000r 2                               .a16
000000r 2                               .i16
000000r 2               .endmacro
000000r 2               
000000r 2               ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
000000r 2               
000000r 2               .macro          short_a
000000r 2                               sep     #M_FLAG
000000r 2                               .a8
000000r 2               .endmacro
000000r 2               
000000r 2               ; Sets the X bit making the index registers 8-bits wide.
000000r 2               
000000r 2               .macro          short_i
000000r 2                               sep     #X_FLAG
000000r 2                               .i8
000000r 2               .endmacro
000000r 2               
000000r 2               ; Sets the M & X bits making the accumulator, memory accesses and index
000000r 2               ; registers 8-bits wide.
000000r 2               
000000r 2               .macro          short_ai
000000r 2                               sep     #M_FLAG|X_FLAG
000000r 2                               .a8
000000r 2                               .i8
000000r 2               .endmacro
000000r 2               
000000r 1                               .include "w65c816sxb.inc"
000000r 2               ;==============================================================================
000000r 2               ; __        ____  ____   ____ ___  _  __  ______  ______
000000r 2               ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
000000r 2               ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
000000r 2               ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
000000r 2               ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
000000r 2               ;
000000r 2               ; Western Design Center W65C816SXB Development Board Hardware Definitions
000000r 2               ;------------------------------------------------------------------------------
000000r 2               ; Copyright (C)2015 HandCoded Software Ltd.
000000r 2               ; All rights reserved.
000000r 2               ;
000000r 2               ; CC65 conversion by Derek Mulcahy.
000000r 2               ;
000000r 2               ; This work is made available under the terms of the Creative Commons
000000r 2               ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
000000r 2               ; following URL to see the details.
000000r 2               ;
000000r 2               ; http://creativecommons.org/licenses/by-nc-sa/4.0/
000000r 2               ;
000000r 2               ;==============================================================================
000000r 2               ; Notes:
000000r 2               ;
000000r 2               ; All of the current stock of W65C51 ACIAs have a silicon bug that causes the
000000r 2               ; 'Transmit Data Register Empty' (TDRE) bit in the status register to be stuck
000000r 2               ; high making it impossible to tell when the transmitter is ready for the next
000000r 2               ; data byte.
000000r 2               ;
000000r 2               ;------------------------------------------------------------------------------
000000r 2               
000000r 2               OSC_FREQ        =     8000000                 ; SXB runs at 8MHz
000000r 2               
000000r 2               ;==============================================================================
000000r 2               ; W65C51 ACIA
000000r 2               ;------------------------------------------------------------------------------
000000r 2               
000000r 2               ACIA_RXD        =     $7f80
000000r 2               ACIA_TXD        =     $7f80
000000r 2               ACIA_SR         =     $7f81
000000r 2               ACIA_CMD        =     $7f82
000000r 2               ACIA_CTL        =     $7f83
000000r 2               
000000r 2               ;==============================================================================
000000r 2               ; W65C21 PIA
000000r 2               ;------------------------------------------------------------------------------
000000r 2               
000000r 2               PIA_PIA         =     $7fa0
000000r 2               PIA_DDRA        =     $7fa0
000000r 2               PIA_CRA         =     $7fa1
000000r 2               PIA_PIB         =     $7fa2
000000r 2               PIA_DDRB        =     $7fa2
000000r 2               PIA_CRB         =     $7fa3
000000r 2               
000000r 2               ;==============================================================================
000000r 2               ; W65C22 VIA
000000r 2               ;------------------------------------------------------------------------------
000000r 2               
000000r 2               VIA1_ORB        =     $7fc0
000000r 2               VIA1_IRB        =     $7fc0
000000r 2               VIA1_ORA        =     $7fc1
000000r 2               VIA1_IRA        =     $7fc1
000000r 2               VIA1_DDRB       =     $7fc2
000000r 2               VIA1_DDRA       =     $7fc3
000000r 2               VIA1_T1CL       =     $7fc4
000000r 2               VIA1_T1CH       =     $7fc5
000000r 2               VIA1_T1LL       =     $7fc6
000000r 2               VIA1_T1LH       =     $7fc7
000000r 2               VIA1_T2CL       =     $7fc8
000000r 2               VIA1_T2CH       =     $7fc9
000000r 2               VIA1_SR         =     $7fca
000000r 2               VIA1_ACR        =     $7fcb
000000r 2               VIA1_PCR        =     $7fcc
000000r 2               VIA1_IFR        =     $7fcd
000000r 2               VIA1_IER        =     $7fce
000000r 2               VIA1_ORAN       =     $7fcf
000000r 2               VIA1_IRAN       =     $7fcf
000000r 2               
000000r 2               ;------------------------------------------------------------------------------
000000r 2               
000000r 2               VIA2_ORB        =     $7fe0
000000r 2               VIA2_IRB        =     $7fe0
000000r 2               VIA2_ORA        =     $7fe1
000000r 2               VIA2_IRA        =     $7fe1
000000r 2               VIA2_DDRB       =     $7fe2
000000r 2               VIA2_DDRA       =     $7fe3
000000r 2               VIA2_T1CL       =     $7fe4
000000r 2               VIA2_T1CH       =     $7fe5
000000r 2               VIA2_T1LL       =     $7fe6
000000r 2               VIA2_T1LH       =     $7fe7
000000r 2               VIA2_T2CL       =     $7fe8
000000r 2               VIA2_T2CH       =     $7fe9
000000r 2               VIA2_SR         =     $7fea
000000r 2               VIA2_ACR        =     $7feb
000000r 2               VIA2_PCR        =     $7fec
000000r 2               VIA2_IFR        =     $7fed
000000r 2               VIA2_IER        =     $7fee
000000r 2               VIA2_ORAN       =     $7fef
000000r 2               VIA2_IRAN       =     $7fef
000000r 2               
000000r 1               
000000r 1               ;===============================================================================
000000r 1               ; Configuration
000000r 1               ;-------------------------------------------------------------------------------
000000r 1               
000000r 1               USE_FIFO        =     0                       ; Build using USB FIFO as UART
000000r 1               
000000r 1               BAUD_RATE       =     19200                   ; ACIA baud rate
000000r 1               
000000r 1               ;-------------------------------------------------------------------------------
000000r 1               
000000r 1               TXD_COUNT       =     OSC_FREQ/(BAUD_RATE/11)
000000r 1               
000000r 1                               .if      TXD_COUNT&$ffff0000
000000r 1                               messg   "TXD_DELAY does not fit in 16-bits"
000000r 1                               .endif
000000r 1               
000000r 1               ;===============================================================================
000000r 1               ; Power On Reset
000000r 1               ;-------------------------------------------------------------------------------
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1                               .import  Start
000000r 1                               .i8
000000r 1                               .a8
000000r 1               RESET:
000000r 1  78                           sei                             ; Stop interrupts
000001r 1  A2 FF                        ldx     #$ff                    ; Reset the stack
000003r 1  9A                           txs
000004r 1               
000004r 1  AD CE 7F                     lda     VIA1_IER                ; Ensure no via interrupts
000007r 1  8D CE 7F                     sta     VIA1_IER
00000Ar 1  AD EE 7F                     lda     VIA2_IER
00000Dr 1  8D EE 7F                     sta     VIA2_IER
000010r 1               
000010r 1                               .if      USE_FIFO
000010r 1                               lda     #$1c                    ; Configure VIA for USB FIFO
000010r 1                               sta     VIA2_DDRB
000010r 1                               lda     #$18
000010r 1                               sta     VIA2_ORB
000010r 1                               .else
000010r 1  9C 82 7F                     stz     ACIA_CMD                ; Configure ACIA
000013r 1  9C 83 7F                     stz     ACIA_CTL
000016r 1  9C 81 7F                     stz     ACIA_SR
000019r 1               
000019r 1  A9 1F                        lda     #%00011111              ; 8 bits, 1 stop bit, 19200 baud
00001Br 1  8D 83 7F                     sta     ACIA_CTL
00001Er 1  A9 C9                        lda     #%11001001              ; No parity, no interrupt
000020r 1  8D 82 7F                     sta     ACIA_CMD
000023r 1  AD 80 7F                     lda     ACIA_RXD                ; Clear receive buffer
000026r 1               
000026r 1  A9 20                        lda     #1<<5                   ; Put VIA2 T2 into timed mode
000028r 1  1C EB 7F                     trb     VIA2_ACR
00002Br 1  20 rr rr                     jsr     TxDelay                 ; And prime the timer
00002Er 1                               .endif
00002Er 1               
00002Er 1  18 FB                        native                          ; Switch to native mode
000030r 1  4C rr rr                     jmp     Start                   ; Jump to the application start
000033r 1               
000033r 1               ;===============================================================================
000033r 1               ; Interrupt Handlers
000033r 1               ;-------------------------------------------------------------------------------
000033r 1               
000033r 1               ; Handle IRQ and BRK interrupts in emulation mode.
000033r 1               
000033r 1               IRQBRK:
000033r 1  80 FE                        bra     *                       ; Loop forever
000035r 1               
000035r 1               ; Handle NMI interrupts in emulation mode.
000035r 1               
000035r 1               NMIRQ:
000035r 1  80 FE                        bra     *                       ; Loop forever
000037r 1               
000037r 1               ;-------------------------------------------------------------------------------
000037r 1               
000037r 1               ; Handle IRQ interrupts in native mode.
000037r 1               
000037r 1               IRQ:
000037r 1  80 FE                        bra     *                       ; Loop forever
000039r 1               
000039r 1               ; Handle IRQ interrupts in native mode.
000039r 1               
000039r 1               BRK_:
000039r 1  80 FE                        bra     *                       ; Loop forever
00003Br 1               
00003Br 1               ; Handle IRQ interrupts in native mode.
00003Br 1               
00003Br 1               NMI:
00003Br 1  80 FE                        bra     *                       ; Loop forever
00003Dr 1               
00003Dr 1               ;-------------------------------------------------------------------------------
00003Dr 1               
00003Dr 1               ; COP and ABORT interrupts are not handled.
00003Dr 1               
00003Dr 1               COP_:
00003Dr 1  80 FE                        bra     *                       ; Loop forever
00003Fr 1               
00003Fr 1               ABORT:
00003Fr 1  80 FE                        bra     *                       ; Loop forever
000041r 1               
000041r 1               ;===============================================================================
000041r 1               ; USB FIFO Interface
000041r 1               ;-------------------------------------------------------------------------------
000041r 1               
000041r 1                               .if      USE_FIFO
000041r 1               
000041r 1               ; Add the character in A to the FTDI USB FIFO transmit buffer. If the buffer
000041r 1               ; is full wait for space to become available.
000041r 1               
000041r 1                               public  UartTx
000041r 1               UartTx:
000041r 1                               phx
000041r 1                               php
000041r 1                               short_ai
000041r 1                               ldx     #$00                    ; Make data port all input
000041r 1                               stx     VIA2_DDRA
000041r 1                               sta     VIA2_ORA                ; Save the output character
000041r 1                               lda     #%01
000041r 1               TxWait:         bit     VIA2_IRB                ; Is there space for more data
000041r 1                               bne     TxWait
000041r 1               
000041r 1                               lda     VIA2_IRB                ; Strobe WR
000041r 1                               and     #$fb
000041r 1                               tax
000041r 1                               ora     #$04
000041r 1                               sta     VIA2_ORB
000041r 1                               lda     #$ff                    ; Make data port all output
000041r 1                               sta     VIA2_DDRA
000041r 1                               nop
000041r 1                               nop
000041r 1                               stx     VIA2_ORB                ; End strobe
000041r 1                               lda     VIA2_IRA
000041r 1                               ldx     #$00                    ; Make data port all output
000041r 1                               stx     VIA2_DDRA
000041r 1                               plp
000041r 1                               plx
000041r 1                               rts
000041r 1               
000041r 1               ; Read a character from the FTDI USB FIFO and return it in A. If no data is
000041r 1               ; available then wait for some to arrive.
000041r 1               
000041r 1                               public  UartRx
000041r 1               UartRx
000041r 1                               phx                             ; Save callers X
000041r 1                               php                             ; Save register sizes
000041r 1                               short_ai                        ; Make registers 8-bit
000041r 1                               lda     #$02                    ; Wait until data in buffer
000041r 1               RxWait:         bit     VIA2_IRB
000041r 1                               bne     RxWait
000041r 1               
000041r 1                               lda     VIA2_IRB                ; Strobe /RD low
000041r 1                               ora     #$08
000041r 1                               tax
000041r 1                               and     #$f7
000041r 1                               sta     VIA2_ORB
000041r 1                               nop                             ; Wait for data to be available
000041r 1                               nop
000041r 1                               nop
000041r 1                               nop
000041r 1                               lda     VIA2_IRA                ; Read it
000041r 1                               stx     VIA2_ORB                ; And end the strobe
000041r 1                               plp                             ; Restore register sizes
000041r 1                               plx                             ; .. and callers X
000041r 1                               rts                             ; Done
000041r 1               
000041r 1               ; Check if the receive buffer in the FIFO contains any data and return C=1 if
000041r 1               ; there is some.
000041r 1               
000041r 1                               public  UartRxTest
000041r 1               UartRxTest:
000041r 1                               pha                             ; Save callers A
000041r 1                               php                             ; Save register sizes
000041r 1                               short_a                         ; Make A 8-bits
000041r 1                               lda     VIA2_IRB                ; Load status bits
000041r 1                               plp                             ; Restore register sizes
000041r 1                               ror     a                       ; Shift data available flag
000041r 1                               ror     a                       ; .. into carry
000041r 1                               pla                             ; Restore A
000041r 1                               rts                             ; Done
000041r 1               
000041r 1               ;===============================================================================
000041r 1               ; ACIA Interface
000041r 1               ;-------------------------------------------------------------------------------
000041r 1               
000041r 1                               .else
000041r 1               
000041r 1               ; Wait until the Timer2 in VIA2 indicates that the last transmission has been
000041r 1               ; completed then send the character in A and restart the timer.
000041r 1               
000041r 1                               .export  UartTx
000041r 1               UartTx:
000041r 1  48                           pha                             ; Save the character
000042r 1  08                           php                             ; Save register sizes
000043r 1  E2 20                        short_a                         ; Make A 8-bits
000045r 1  48                           pha
000046r 1  A9 20                        lda     #1<<5
000048r 1  2C ED 7F     TxWait:         bit     VIA2_IFR                ; Has the timer finished?
00004Br 1  F0 FB                        beq     TxWait
00004Dr 1  20 rr rr                     jsr     TxDelay                 ; Yes, re-reload the timer
000050r 1  68                           pla
000051r 1  8D 80 7F                     sta     ACIA_TXD                ; Transmit the character
000054r 1  28                           plp                             ; Restore register sizes
000055r 1  68                           pla                             ; And callers A
000056r 1  60                           rts                             ; Done
000057r 1               
000057r 1               TxDelay:
000057r 1  A9 E8                        lda     #<TXD_COUNT             ; Load VIA T2 with transmit
000059r 1  8D E8 7F                     sta     VIA2_T2CL               ; .. delay time
00005Cr 1  A9 11                        lda     #>TXD_COUNT
00005Er 1  8D E9 7F                     sta     VIA2_T2CH
000061r 1  60                           rts
000062r 1               
000062r 1               ; Fetch the next character from the receive buffer waiting for some to arrive
000062r 1               ; if the buffer is empty.
000062r 1               
000062r 1                               .export  UartRx
000062r 1               UartRx:
000062r 1  08                           php                             ; Save register sizes
000063r 1  E2 20                        short_a                         ; Make A 8-bits
000065r 1               RxWait:
000065r 1  AD 81 7F                     lda     ACIA_SR                 ; Any data in RX buffer?
000068r 1  29 08                        and     #$08
00006Ar 1  F0 F9                        beq     RxWait                  ; No
00006Cr 1  AD 80 7F                     lda     ACIA_RXD                ; Yes, read it
00006Fr 1  28                           plp                             ; Restore register sizes
000070r 1  60                           rts                             ; Done
000071r 1               
000071r 1               ; Check if the receive buffer contains any data and return C=1 if there is
000071r 1               ; some.
000071r 1               
000071r 1                               .export  UartRxTest
000071r 1               UartRxTest:
000071r 1  48                           pha                             ; Save callers A
000072r 1  08                           php
000073r 1  E2 20                        short_a
000075r 1  AD 81 7F                     lda     ACIA_SR                 ; Read the status register
000078r 1  28                           plp
000079r 1  6A                           ror     a                       ; Shift RDRF bit into carry
00007Ar 1  6A                           ror     a
00007Br 1  6A                           ror     a
00007Cr 1  6A                           ror     a
00007Dr 1  68                           pla                             ; Restore A
00007Er 1  60                           rts                             ; Done
00007Fr 1               
00007Fr 1                               .endif
00007Fr 1               
00007Fr 1               ;===============================================================================
00007Fr 1               ; ROM Bank Selection
00007Fr 1               ;-------------------------------------------------------------------------------
00007Fr 1               
00007Fr 1               ; Select the flash ROM bank indicated by the two low order bits of A. The pins
00007Fr 1               ; should be set to inputs when a hi bit is needed and a low output for a lo bit.
00007Fr 1               
00007Fr 1                               .export RomSelect
00007Fr 1               RomSelect:
00007Fr 1  08                           php				; Ensure 8-bit A
000080r 1  E2 20                        short_a
000082r 1  6A           		ror	a			; Shift out bit 0
000083r 1  08           		php				; .. and save
000084r 1  6A           		ror	a			; Shift out bit 1
000085r 1  A9 00        		lda	#0			; Work out pattern
000087r 1  B0 02        		bcs	*+4
000089r 1  09 C0        		ora	#%11000000
00008Br 1  28           		plp
00008Cr 1  B0 02        		bcs	*+4
00008Er 1  09 0C        		ora	#%00001100
000090r 1  8D EC 7F     		sta	VIA2_PCR		; And set
000093r 1  28           		plp
000094r 1  60                           rts                             ; Done
000095r 1               
000095r 1               ; Check if the select ROM bank contains WDC firmware. If it does return with
000095r 1               ; the Z flag set.
000095r 1               
000095r 1                               .export RomCheck
000095r 1               RomCheck:
000095r 1  AD EC 7F     		lda	VIA2_PCR		; WDC ROM selected?
000098r 1  29 CC        		and	#%11001100
00009Ar 1  60                           rts
00009Br 1               
00009Br 1               ;===============================================================================
00009Br 1               ; Reset Vectors
00009Br 1               ;-------------------------------------------------------------------------------
00009Br 1               
00009Br 1                               .segment "SHADOW"
000000r 1               
000000r 1               ; ShadowVectors   section offset $7ee0
000000r 1               
000000r 1  xx xx xx xx                  .res       4                       ; Reserved
000004r 1  rr rr                        .word      COP_                    ; $FFE4 - COP(816)
000006r 1  rr rr                        .word      BRK_                    ; $FFE6 - BRK(816)
000008r 1  rr rr                        .word      ABORT                   ; $FFE8 - ABORT(816)
00000Ar 1  rr rr                        .word      NMI                     ; $FFEA - NMI(816)
00000Cr 1  xx xx                        .res       2                       ; Reserved
00000Er 1  rr rr                        .word      IRQ                     ; $FFEE - IRQ(816)
000010r 1               
000010r 1  xx xx xx xx                  .res       4
000014r 1  rr rr                        .word      COP_                    ; $FFF4 - COP(C02)
000016r 1  xx xx                        .res       2                       ; $Reserved
000018r 1  rr rr                        .word      ABORT                   ; $FFF8 - ABORT(C02)
00001Ar 1  rr rr                        .word      NMIRQ                   ; $FFFA - NMI(C02)
00001Cr 1  rr rr                        .word      RESET                   ; $FFFC - RESET(C02)
00001Er 1  rr rr                        .word      IRQBRK                  ; $FFFE - IRQBRK(C02)
000020r 1               
000020r 1                               ; ends
000020r 1               
000020r 1               ;------------------------------------------------------------------------------
000020r 1               
000020r 1               ;                 .segment "VECTORS"
000020r 1               
000020r 1               ; ; Vectors         section offset $ffe0
000020r 1               
000020r 1               ;                 .res       4                       ; Reserved
000020r 1               ;                 .word      COP_                    ; $FFE4 - COP(816)
000020r 1               ;                 .word      BRK_                    ; $FFE6 - BRK(816)
000020r 1               ;                 .word      ABORT                   ; $FFE8 - ABORT(816)
000020r 1               ;                 .word      NMI                     ; $FFEA - NMI(816)
000020r 1               ;                 .res       2                       ; Reserved
000020r 1               ;                 .word      IRQ                     ; $FFEE - IRQ(816)
000020r 1               
000020r 1               ;                 .res       4
000020r 1               ;                 .word      COP_                    ; $FFF4 - COP(C02)
000020r 1               ;                 .res       2                       ; $Reserved
000020r 1               ;                 .word      ABORT                   ; $FFF8 - ABORT(C02)
000020r 1               ;                 .word      NMIRQ                   ; $FFFA - NMI(C02)
000020r 1               ;                 .word      RESET                   ; $FFFC - RESET(C02)
000020r 1               ;                 .word      IRQBRK                  ; $FFFE - IRQBRK(C02)
000020r 1               
000020r 1                               .end
